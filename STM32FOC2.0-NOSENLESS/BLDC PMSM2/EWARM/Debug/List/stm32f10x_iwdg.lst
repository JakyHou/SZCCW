###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     24/Feb/2014  19:26:46 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\stm32\STM32F10XFWLIB\src\stm32f10x_iwdg.c             #
#    Command line =  D:\stm32\STM32F10XFWLIB\src\stm32f10x_iwdg.c -D          #
#                    VECT_TAB_FLASH -lCN "D:\stm32\BLDC                       #
#                    PMSM2\EWARM\Debug\List\" --diag_error Pe068,Pe069 -o     #
#                    "D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\" --debug           #
#                    --endian=little --cpu=Cortex-M3 --fpu=None               #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\" -I "D:\stm32\BLDC        #
#                    PMSM2\EWARM\..\..\STM32F10XFWLIB\inc\" -I                #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\inc\" -Oh                  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  D:\stm32\BLDC PMSM2\EWARM\Debug\List\stm32f10x_iwdg.lst  #
#    Object file  =  D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\stm32f10x_iwdg.o     #
#                                                                             #
#                                                                             #
###############################################################################

D:\stm32\STM32F10XFWLIB\src\stm32f10x_iwdg.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_iwdg.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0
      5          * Date               : 05/23/2008
      6          * Description        : This file provides all the IWDG firmware functions.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED 
     15          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "stm32f10x_iwdg.h"
     20          
     21          /* Private typedef -----------------------------------------------------------*/
     22          /* Private define ------------------------------------------------------------*/
     23          /* ---------------------- IWDG registers bit mask ------------------------ */
     24          /* KR register bit mask */
     25          #define KR_KEY_Reload    ((u16)0xAAAA)
     26          #define KR_KEY_Enable    ((u16)0xCCCC)
     27          
     28          /* Private macro -------------------------------------------------------------*/
     29          /* Private variables ---------------------------------------------------------*/
     30          /* Private function prototypes -----------------------------------------------*/
     31          /* Private functions ---------------------------------------------------------*/
     32          
     33          /*******************************************************************************
     34          * Function Name  : IWDG_WriteAccessCmd
     35          * Description    : Enables or disables write access to IWDG_PR and IWDG_RLR
     36          *                  registers.
     37          * Input          : - IWDG_WriteAccess: new state of write access to IWDG_PR and
     38          *                    IWDG_RLR registers.
     39          *                    This parameter can be one of the following values:
     40          *                       - IWDG_WriteAccess_Enable: Enable write access to 
     41          *                         IWDG_PR and IWDG_RLR registers
     42          *                       - IWDG_WriteAccess_Disable: Disable write access to
     43          *                         IWDG_PR and IWDG_RLR registers
     44          * Output         : None
     45          * Return         : None
     46          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     47          void IWDG_WriteAccessCmd(u16 IWDG_WriteAccess)
     48          {
     49            /* Check the parameters */
     50            assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
     51          
     52            IWDG->KR = IWDG_WriteAccess;
   \                     IWDG_WriteAccessCmd:
   \   00000000   0x....             LDR.N    R1,??DataTable5  ;; 0x40003000
   \   00000002   0x6008             STR      R0,[R1, #+0]
     53          }
   \   00000004   0x4770             BX       LR               ;; return
     54          
     55          /*******************************************************************************
     56          * Function Name  : IWDG_SetPrescaler
     57          * Description    : Sets IWDG Prescaler value.
     58          * Input          : - IWDG_Prescaler: specifies the IWDG Prescaler value.
     59          *                    This parameter can be one of the following values:
     60          *                       - IWDG_Prescaler_4: IWDG prescaler set to 4
     61          *                       - IWDG_Prescaler_8: IWDG prescaler set to 8
     62          *                       - IWDG_Prescaler_16: IWDG prescaler set to 16
     63          *                       - IWDG_Prescaler_32: IWDG prescaler set to 32
     64          *                       - IWDG_Prescaler_64: IWDG prescaler set to 64
     65          *                       - IWDG_Prescaler_128: IWDG prescaler set to 128
     66          *                       - IWDG_Prescaler_256: IWDG prescaler set to 256
     67          * Output         : None
     68          * Return         : None
     69          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     70          void IWDG_SetPrescaler(u8 IWDG_Prescaler)
     71          {
     72            /* Check the parameters */
     73            assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
     74          
     75            IWDG->PR = IWDG_Prescaler;
   \                     IWDG_SetPrescaler:
   \   00000000   0x....             LDR.N    R1,??DataTable5_1  ;; 0x40003004
   \   00000002   0x6008             STR      R0,[R1, #+0]
     76          }
   \   00000004   0x4770             BX       LR               ;; return
     77          
     78          /*******************************************************************************
     79          * Function Name  : IWDG_SetReload
     80          * Description    : Sets IWDG Reload value.
     81          * Input          : - Reload: specifies the IWDG Reload value.
     82          *                    This parameter must be a number between 0 and 0x0FFF.
     83          * Output         : None
     84          * Return         : None
     85          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     86          void IWDG_SetReload(u16 Reload)
     87          {
     88            /* Check the parameters */
     89            assert_param(IS_IWDG_RELOAD(Reload));
     90          
     91            IWDG->RLR = Reload;
   \                     IWDG_SetReload:
   \   00000000   0x....             LDR.N    R1,??DataTable5_2  ;; 0x40003008
   \   00000002   0x6008             STR      R0,[R1, #+0]
     92          }
   \   00000004   0x4770             BX       LR               ;; return
     93          
     94          /*******************************************************************************
     95          * Function Name  : IWDG_ReloadCounter
     96          * Description    : Reloads IWDG counter with value defined in the reload register
     97          *                  (write access to IWDG_PR and IWDG_RLR registers disabled).
     98          * Input          : None
     99          * Output         : None
    100          * Return         : None
    101          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          void IWDG_ReloadCounter(void)
    103          {
    104            IWDG->KR = KR_KEY_Reload;
   \                     IWDG_ReloadCounter:
   \   00000000   0x....             LDR.N    R0,??DataTable5  ;; 0x40003000
   \   00000002   0xF64A 0x21AA      MOVW     R1,#+43690
   \   00000006   0x6001             STR      R1,[R0, #+0]
    105          }
   \   00000008   0x4770             BX       LR               ;; return
    106          
    107          /*******************************************************************************
    108          * Function Name  : IWDG_Enable
    109          * Description    : Enables IWDG (write access to IWDG_PR and IWDG_RLR registers
    110          *                  disabled).
    111          * Input          : None
    112          * Output         : None
    113          * Return         : None
    114          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    115          void IWDG_Enable(void)
    116          {
    117            IWDG->KR = KR_KEY_Enable;
   \                     IWDG_Enable:
   \   00000000   0x....             LDR.N    R0,??DataTable5  ;; 0x40003000
   \   00000002   0xF64C 0x41CC      MOVW     R1,#+52428
   \   00000006   0x6001             STR      R1,[R0, #+0]
    118          }
   \   00000008   0x4770             BX       LR               ;; return
    119          
    120          /*******************************************************************************
    121          * Function Name  : IWDG_GetFlagStatus
    122          * Description    : Checks whether the specified IWDG flag is set or not.
    123          * Input          : - IWDG_FLAG: specifies the flag to check.
    124          *                    This parameter can be one of the following values:
    125          *                       - IWDG_FLAG_PVU: Prescaler Value Update on going
    126          *                       - IWDG_FLAG_RVU: Reload Value Update on going
    127          * Output         : None
    128          * Return         : The new state of IWDG_FLAG (SET or RESET).
    129          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    130          FlagStatus IWDG_GetFlagStatus(u16 IWDG_FLAG)
    131          {
    132            FlagStatus bitstatus = RESET;
   \                     IWDG_GetFlagStatus:
   \   00000000   0x2100             MOVS     R1,#+0
    133          
    134            /* Check the parameters */
    135            assert_param(IS_IWDG_FLAG(IWDG_FLAG));
    136          
    137            if ((IWDG->SR & IWDG_FLAG) != (u32)RESET)
   \   00000002   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4000300c
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0x4202             TST      R2,R0
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x2101             MOVNE    R1,#+1
    138            {
    139              bitstatus = SET;
    140            }
    141            else
    142            {
    143              bitstatus = RESET;
    144            }
    145          
    146            /* Return the flag status */
    147            return bitstatus;
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x4770             BX       LR               ;; return
    148          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40003000         DC32     0x40003000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40003004         DC32     0x40003004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40003008         DC32     0x40003008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4000300C         DC32     0x4000300c
    149          
    150          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  IWDG_Enable
        0  IWDG_GetFlagStatus
        0  IWDG_ReloadCounter
        0  IWDG_SetPrescaler
        0  IWDG_SetReload
        0  IWDG_WriteAccessCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      10  IWDG_Enable
      16  IWDG_GetFlagStatus
      10  IWDG_ReloadCounter
       6  IWDG_SetPrescaler
       6  IWDG_SetReload
       6  IWDG_WriteAccessCmd

 
 70 bytes in section .text
 
 70 bytes of CODE memory

Errors: none
Warnings: none
