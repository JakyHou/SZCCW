###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     24/Feb/2014  19:26:38 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\stm32\BLDC PMSM2\src\MC_PID_regulators.c              #
#    Command line =  "D:\stm32\BLDC PMSM2\src\MC_PID_regulators.c" -D         #
#                    VECT_TAB_FLASH -lCN "D:\stm32\BLDC                       #
#                    PMSM2\EWARM\Debug\List\" --diag_error Pe068,Pe069 -o     #
#                    "D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\" --debug           #
#                    --endian=little --cpu=Cortex-M3 --fpu=None               #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\" -I "D:\stm32\BLDC        #
#                    PMSM2\EWARM\..\..\STM32F10XFWLIB\inc\" -I                #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\inc\" -Ohs                 #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  D:\stm32\BLDC PMSM2\EWARM\Debug\List\MC_PID_regulators.l #
#                    st                                                       #
#    Object file  =  D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\MC_PID_regulators.o  #
#                                                                             #
#                                                                             #
###############################################################################

D:\stm32\BLDC PMSM2\src\MC_PID_regulators.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : MC_PID_regulators.c
      3          * Author             : IMS Systems Lab 
      4          * Date First Issued  : 21/11/07
      5          * Description        : This file contains the software implementation for the
      6                                 PI(D) regulators.
      7          ********************************************************************************
      8          * History:
      9          * 21/11/07 v1.0
     10          * 29/05/08 v2.0
     11          ********************************************************************************
     12          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     14          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     15          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     16          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     17          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18          *
     19          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     20          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     21          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     22          *******************************************************************************/
     23          
     24          /* Standard include ----------------------------------------------------------*/
     25          
     26          #include "stm32f10x_lib.h"
     27          #include "stm32f10x_MClib.h"
     28          #include "stm32f10x_type.h"
     29          #include "MC_Globals.h"
     30          
     31          #define PID_SPEED_REFERENCE  (u16)(PID_SPEED_REFERENCE_RPM/6)
     32          
     33          typedef signed long long s64;
     34          
     35          /*******************************************************************************
     36          * Function Name  : PID_Init
     37          * Description    : Initialize PID coefficients for torque, flux and speed loop: 
     38                             Kp_Gain: proportional coeffcient 
     39                             Ki_Gain: integral coeffcient 
     40                             Kd_Gain: differential coeffcient 
     41          * Input          : Pointer 1 to Torque PI structure,  
     42                             Pointer 2 to Flux PI structure,  
     43                             Pointer 3 to Speed PI structure  
     44          * Output         : None
     45          * Return         : None
     46          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     47          void PID_Init (PID_Struct_t *PID_Torque, PID_Struct_t *PID_Flux, 
     48                                                                  PID_Struct_t *PID_Speed)
     49          {
   \                     PID_Init:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
     50            hTorque_Reference = PID_TORQUE_REFERENCE;
   \   00000004   0x....             LDR.N    R3,??DataTable1
   \   00000006   0xF44F 0x64B4      MOV      R4,#+1440
   \   0000000A   0x801C             STRH     R4,[R3, #+0]
     51          
     52            PID_Torque->hKp_Gain    = PID_TORQUE_KP_DEFAULT;
   \   0000000C   0xF640 0x23EA      MOVW     R3,#+2794
   \   00000010   0x8003             STRH     R3,[R0, #+0]
     53            PID_Torque->hKp_Divisor = TF_KPDIV;  
   \   00000012   0xF44F 0x6480      MOV      R4,#+1024
   \   00000016   0x8044             STRH     R4,[R0, #+2]
     54          
     55            PID_Torque->hKi_Gain = PID_TORQUE_KI_DEFAULT;
   \   00000018   0xF640 0x7928      MOVW     R9,#+3880
   \   0000001C   0xF8A0 0x9004      STRH     R9,[R0, #+4]
     56            PID_Torque->hKi_Divisor = TF_KIDIV;
   \   00000020   0xF44F 0x5600      MOV      R6,#+8192
   \   00000024   0x80C6             STRH     R6,[R0, #+6]
     57            
     58            PID_Torque->hKd_Gain = PID_TORQUE_KD_DEFAULT;
   \   00000026   0x2764             MOVS     R7,#+100
   \   00000028   0x8307             STRH     R7,[R0, #+24]
     59            PID_Torque->hKd_Divisor = TF_KDDIV;
   \   0000002A   0x8346             STRH     R6,[R0, #+26]
     60            PID_Torque->wPreviousError = 0;
   \   0000002C   0x2700             MOVS     R7,#+0
   \   0000002E   0x61C7             STR      R7,[R0, #+28]
     61            
     62            PID_Torque->hLower_Limit_Output=S16_MIN;   //Lower Limit for Output limitation
   \   00000030   0x....             LDR.N    R7,??DataTable1_1  ;; 0xffff8000
   \   00000032   0x8107             STRH     R7,[R0, #+8]
     63            PID_Torque->hUpper_Limit_Output= S16_MAX;   //Upper Limit for Output limitation
   \   00000034   0xF647 0x7CFF      MOVW     R12,#+32767
   \   00000038   0xF8A0 0xC00A      STRH     R12,[R0, #+10]
     64            PID_Torque->wLower_Limit_Integral = S16_MIN * TF_KIDIV;
   \   0000003C   0xF04F 0x4E70      MOV      LR,#-268435456
   \   00000040   0xF8C0 0xE00C      STR      LR,[R0, #+12]
     65            PID_Torque->wUpper_Limit_Integral = S16_MAX * TF_KIDIV;
   \   00000044   0x.... 0x....      LDR.W    R8,??DataTable1_2  ;; 0xfffe000
   \   00000048   0xF8C0 0x8010      STR      R8,[R0, #+16]
     66            PID_Torque->wIntegral = 0;
   \   0000004C   0x2500             MOVS     R5,#+0
   \   0000004E   0x6145             STR      R5,[R0, #+20]
     67           
     68            /**************************************************/
     69            /************END PID Torque Regulator members*******/
     70            /**************************************************/
     71          
     72            /**************************************************/
     73            /************PID Flux Regulator members*************/
     74            /**************************************************/
     75          
     76            PID_Flux->wIntegral = 0;  // reset integral value 
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x6148             STR      R0,[R1, #+20]
     77          
     78            hFlux_Reference = PID_FLUX_REFERENCE;
   \   00000054   0x....             LDR.N    R0,??DataTable1_3
   \   00000056   0x8005             STRH     R5,[R0, #+0]
     79          
     80            PID_Flux->hKp_Gain    = PID_FLUX_KP_DEFAULT;
   \   00000058   0x800B             STRH     R3,[R1, #+0]
     81            PID_Flux->hKp_Divisor = TF_KPDIV;  
   \   0000005A   0x804C             STRH     R4,[R1, #+2]
     82          
     83            PID_Flux->hKi_Gain = PID_FLUX_KI_DEFAULT;
   \   0000005C   0xF8A1 0x9004      STRH     R9,[R1, #+4]
     84            PID_Flux->hKi_Divisor = TF_KIDIV;
   \   00000060   0x80CE             STRH     R6,[R1, #+6]
     85            
     86            PID_Flux->hKd_Gain = PID_FLUX_KD_DEFAULT;
   \   00000062   0x2064             MOVS     R0,#+100
   \   00000064   0x8308             STRH     R0,[R1, #+24]
     87            PID_Flux->hKd_Divisor = TF_KDDIV;
   \   00000066   0x834E             STRH     R6,[R1, #+26]
     88            PID_Flux->wPreviousError = 0;
   \   00000068   0x61CD             STR      R5,[R1, #+28]
     89            
     90            PID_Flux->hLower_Limit_Output=S16_MIN;   //Lower Limit for Output limitation
   \   0000006A   0x810F             STRH     R7,[R1, #+8]
     91            PID_Flux->hUpper_Limit_Output= S16_MAX;   //Upper Limit for Output limitation
   \   0000006C   0xF8A1 0xC00A      STRH     R12,[R1, #+10]
     92            PID_Flux->wLower_Limit_Integral = S16_MIN * TF_KIDIV;
   \   00000070   0xF8C1 0xE00C      STR      LR,[R1, #+12]
     93            PID_Flux->wUpper_Limit_Integral = S16_MAX * TF_KIDIV;
   \   00000074   0xF8C1 0x8010      STR      R8,[R1, #+16]
     94            PID_Flux->wIntegral = 0;
   \   00000078   0x614D             STR      R5,[R1, #+20]
     95            
     96            /**************************************************/
     97            /************END PID Flux Regulator members*********/
     98            /**************************************************/
     99          
    100            /**************************************************/
    101            /************PID Speed Regulator members*************/
    102            /**************************************************/
    103          
    104          
    105            PID_Speed->wIntegral = 0;  // reset integral value 
   \   0000007A   0x6155             STR      R5,[R2, #+20]
    106          
    107            hSpeed_Reference = PID_SPEED_REFERENCE;
   \   0000007C   0x....             LDR.N    R0,??DataTable1_4
   \   0000007E   0x21FA             MOVS     R1,#+250
   \   00000080   0x8001             STRH     R1,[R0, #+0]
    108          
    109            PID_Speed->hKp_Gain    = PID_SPEED_KP_DEFAULT;
   \   00000082   0xF44F 0x707A      MOV      R0,#+1000
   \   00000086   0x8010             STRH     R0,[R2, #+0]
    110            PID_Speed->hKp_Divisor = SP_KPDIV;  
   \   00000088   0x2010             MOVS     R0,#+16
   \   0000008A   0x8050             STRH     R0,[R2, #+2]
    111          
    112            PID_Speed->hKi_Gain = PID_SPEED_KI_DEFAULT;
   \   0000008C   0xF44F 0x702F      MOV      R0,#+700
   \   00000090   0x8090             STRH     R0,[R2, #+4]
    113            PID_Speed->hKi_Divisor = SP_KIDIV;
   \   00000092   0xF44F 0x7080      MOV      R0,#+256
   \   00000096   0x80D0             STRH     R0,[R2, #+6]
    114            
    115            PID_Speed->hKd_Gain = PID_SPEED_KD_DEFAULT;
   \   00000098   0x8315             STRH     R5,[R2, #+24]
    116            PID_Speed->hKd_Divisor = SP_KDDIV;
   \   0000009A   0x2010             MOVS     R0,#+16
   \   0000009C   0x8350             STRH     R0,[R2, #+26]
    117            PID_Speed->wPreviousError = 0;
   \   0000009E   0x61D5             STR      R5,[R2, #+28]
    118            
    119            PID_Speed->hLower_Limit_Output= -IQMAX;   //Lower Limit for Output limitation
   \   000000A0   0x....             LDR.N    R0,??DataTable1_5  ;; 0xfffff37c
   \   000000A2   0x8110             STRH     R0,[R2, #+8]
    120            PID_Speed->hUpper_Limit_Output= IQMAX;   //Upper Limit for Output limitation
   \   000000A4   0xF640 0x4084      MOVW     R0,#+3204
   \   000000A8   0x8150             STRH     R0,[R2, #+10]
    121            PID_Speed->wLower_Limit_Integral = -IQMAX * SP_KIDIV;
   \   000000AA   0x....             LDR.N    R0,??DataTable1_6  ;; 0xfff37c00
   \   000000AC   0x60D0             STR      R0,[R2, #+12]
    122            PID_Speed->wUpper_Limit_Integral = IQMAX * SP_KIDIV;
   \   000000AE   0x....             LDR.N    R0,??DataTable1_7  ;; 0xc8400
   \   000000B0   0x6110             STR      R0,[R2, #+16]
    123            PID_Speed->wIntegral = 0;
   \   000000B2   0x6155             STR      R5,[R2, #+20]
    124            /**************************************************/
    125            /**********END PID Speed Regulator members*********/
    126            /**************************************************/
    127          
    128          }
   \   000000B4   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    129          
    130          /*******************************************************************************
    131          * Function Name  : PID_Speed_Coefficients_update
    132          * Description    : Update Kp, Ki & Kd coefficients of speed regulation loop 
    133                             according to motor speed. See "MC_PID_Param.h" for parameters 
    134                             setting
    135          * Input          : s16 
    136                             Mechanical motor speed with 0.1 Hz resolution 
    137                             eg: 10Hz <-> (s16)100
    138          * Output         : None
    139          * Return         : None
    140          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          void PID_Speed_Coefficients_update(s16 motor_speed, PID_Struct_t *PID_Struct)
    142          {
    143          if ( motor_speed < 0)  
   \                     PID_Speed_Coefficients_update:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF48             IT       MI 
   \   00000004   0x4240             RSBMI    R0,R0,#+0
    144          {
    145            motor_speed = (u16)(-motor_speed);   // absolute value only
    146          }
    147          
    148          if ( motor_speed <= Freq_Min )    // motor speed lower than Freq_Min? 
   \   00000006   0xB200             SXTH     R0,R0
   \   00000008   0x280B             CMP      R0,#+11
   \   0000000A   0xDA06             BGE.N    ??PID_Speed_Coefficients_update_0
    149          {
    150            PID_Struct->hKp_Gain = Kp_Fmin;   
   \   0000000C   0xF44F 0x60FA      MOV      R0,#+2000
    151            PID_Struct->hKi_Gain = Ki_Fmin;
   \   00000010   0xF44F 0x727A      MOV      R2,#+1000
   \   00000014   0x808A             STRH     R2,[R1, #+4]
   \   00000016   0x8008             STRH     R0,[R1, #+0]
   \   00000018   0x4770             BX       LR
    152          
    153            #ifdef DIFFERENTIAL_TERM_ENABLED
    154            PID_Struct->hKd_Gain =Kd_Fmin;
    155            #endif
    156          }
    157          else if ( motor_speed <= F_1 )
   \                     ??PID_Speed_Coefficients_update_0:
   \   0000001A   0x2833             CMP      R0,#+51
   \   0000001C   0xDA0C             BGE.N    ??PID_Speed_Coefficients_update_1
    158          {
    159            PID_Struct->hKp_Gain = Kp_Fmin + (s32)(alpha_Kp_1*(motor_speed - Freq_Min) / 1024);
   \   0000001E   0xF1A0 0x020A      SUB      R2,R0,#+10
   \   00000022   0x....             LDR.N    R0,??DataTable1_8  ;; 0xffff9c00
   \   00000024   0x4350             MULS     R0,R0,R2
   \   00000026   0x1243             ASRS     R3,R0,#+9
   \   00000028   0xEB00 0x5093      ADD      R0,R0,R3, LSR #+22
   \   0000002C   0x1280             ASRS     R0,R0,#+10
   \   0000002E   0xF500 0x60FA      ADD      R0,R0,#+2000
    160            PID_Struct->hKi_Gain = Ki_Fmin + (s32)(alpha_Ki_1*(motor_speed - Freq_Min) / 1024);
   \   00000032   0xF44F 0x43C8      MOV      R3,#+25600
   \   00000036   0xE026             B.N      ??PID_Speed_Coefficients_update_2
    161          
    162            #ifdef DIFFERENTIAL_TERM_ENABLED
    163            PID_Struct->hKd_Gain = Kd_Fmin + (s32)(alpha_Kd_1*(motor_speed - Freq_Min) / 1024);
    164            #endif
    165          }
    166          else if ( motor_speed <= F_2 )
   \                     ??PID_Speed_Coefficients_update_1:
   \   00000038   0x28C9             CMP      R0,#+201
   \   0000003A   0xDA14             BGE.N    ??PID_Speed_Coefficients_update_3
    167          {
    168            PID_Struct->hKp_Gain = Kp_F_1 + (s32)(alpha_Kp_2 * (motor_speed-F_1) / 1024);
   \   0000003C   0xF1A0 0x0232      SUB      R2,R0,#+50
   \   00000040   0x....             LDR.N    R0,??DataTable1_9  ;; 0xfffff956
   \   00000042   0x4350             MULS     R0,R0,R2
   \   00000044   0x1243             ASRS     R3,R0,#+9
   \   00000046   0xEB00 0x5093      ADD      R0,R0,R3, LSR #+22
   \   0000004A   0x1280             ASRS     R0,R0,#+10
   \   0000004C   0xF500 0x707A      ADD      R0,R0,#+1000
    169            PID_Struct->hKi_Gain = Ki_F_1 + (s32)(alpha_Ki_2 * (motor_speed-F_1) / 1024);
   \   00000050   0x....             LDR.N    R3,??DataTable1_10  ;; 0xffffe556
   \   00000052   0x435A             MULS     R2,R2,R3
   \   00000054   0x1253             ASRS     R3,R2,#+9
   \   00000056   0xEB02 0x5293      ADD      R2,R2,R3, LSR #+22
   \   0000005A   0x1292             ASRS     R2,R2,#+10
   \   0000005C   0xF502 0x62FA      ADD      R2,R2,#+2000
   \   00000060   0x808A             STRH     R2,[R1, #+4]
   \   00000062   0x8008             STRH     R0,[R1, #+0]
   \   00000064   0x4770             BX       LR
    170          
    171            #ifdef DIFFERENTIAL_TERM_ENABLED
    172            PID_Struct->hKd_Gain = Kd_F_1 + (s32)(alpha_Kd_2 * (motor_speed-F_1) / 1024);
    173            #endif
    174          }
    175          else if ( motor_speed <= Freq_Max )
   \                     ??PID_Speed_Coefficients_update_3:
   \   00000066   0xF240 0x12F5      MOVW     R2,#+501
   \   0000006A   0x4290             CMP      R0,R2
   \   0000006C   0xDA15             BGE.N    ??PID_Speed_Coefficients_update_4
    176          {
    177            PID_Struct->hKp_Gain = Kp_F_2 + (s32)(alpha_Kp_3 * (motor_speed-F_2) / 1024);
   \   0000006E   0xF1A0 0x02C8      SUB      R2,R0,#+200
   \   00000072   0xF46F 0x7055      MVN      R0,#+852
   \   00000076   0x4350             MULS     R0,R0,R2
   \   00000078   0x1243             ASRS     R3,R0,#+9
   \   0000007A   0xEB00 0x5093      ADD      R0,R0,R3, LSR #+22
   \   0000007E   0x1280             ASRS     R0,R0,#+10
   \   00000080   0xF200 0x20EE      ADDW     R0,R0,#+750
    178            PID_Struct->hKi_Gain = Ki_F_2 + (s32)(alpha_Ki_3 * (motor_speed-F_2) / 1024);
   \   00000084   0x....             LDR.N    R3,??DataTable1_9  ;; 0xfffff956
   \                     ??PID_Speed_Coefficients_update_2:
   \   00000086   0x435A             MULS     R2,R2,R3
   \   00000088   0x1253             ASRS     R3,R2,#+9
   \   0000008A   0xEB02 0x5293      ADD      R2,R2,R3, LSR #+22
   \   0000008E   0x1292             ASRS     R2,R2,#+10
   \   00000090   0xF502 0x727A      ADD      R2,R2,#+1000
   \   00000094   0x808A             STRH     R2,[R1, #+4]
   \   00000096   0x8008             STRH     R0,[R1, #+0]
   \   00000098   0x4770             BX       LR
    179          
    180            #ifdef DIFFERENTIAL_TERM_ENABLED
    181            PID_Struct->hKd_Gain = Kd_F_2 + (s32)(alpha_Kd_3 * (motor_speed-F_2) / 1024);
    182            #endif
    183          }
    184          else  // motor speed greater than Freq_Max? 
    185          {
    186            PID_Struct->hKp_Gain = Kp_Fmax;
   \                     ??PID_Speed_Coefficients_update_4:
   \   0000009A   0xF44F 0x70FA      MOV      R0,#+500
    187            PID_Struct->hKi_Gain = Ki_Fmax;
   \   0000009E   0x4602             MOV      R2,R0
   \   000000A0   0x808A             STRH     R2,[R1, #+4]
   \   000000A2   0x8008             STRH     R0,[R1, #+0]
    188          
    189            #ifdef DIFFERENTIAL_TERM_ENABLED
    190            PID_Struct->hKd_Gain = Kd_Fmax;
    191            #endif
    192          }
    193          }
   \   000000A4   0x4770             BX       LR               ;; return
    194          
    195          /*******************************************************************************
    196          * Function Name  : PID_Regulator
    197          * Description    : Compute the PI(D) output for a PI(D) regulation.
    198          * Input          : Pointer to the PID settings (*PID_Flux)
    199                             Speed in s16 format
    200          * Output         : s16
    201          * Return         : None
    202          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    203          s16 PID_Regulator(s16 hReference, s16 hPresentFeedback, PID_Struct_t *PID_Struct)
    204          {
   \                     PID_Regulator:
   \   00000000   0xB430             PUSH     {R4,R5}
    205            s32 wError, wProportional_Term,wIntegral_Term, houtput_32;
    206            s64 dwAux; 
    207          #ifdef DIFFERENTIAL_TERM_ENABLED    
    208            s32 wDifferential_Term;
    209          #endif    
    210            // error computation
    211            wError= (s32)(hReference - hPresentFeedback);
   \   00000002   0x1A40             SUBS     R0,R0,R1
    212           
    213            // Proportional term computation
    214            wProportional_Term = PID_Struct->hKp_Gain * wError;
   \   00000004   0xF9B2 0x1000      LDRSH    R1,[R2, #+0]
   \   00000008   0xFB00 0xF301      MUL      R3,R0,R1
    215          
    216            // Integral term computation
    217            if (PID_Struct->hKi_Gain == 0)
   \   0000000C   0xF9B2 0x1004      LDRSH    R1,[R2, #+4]
   \   00000010   0xB909             CBNZ.N   R1,??PID_Regulator_0
    218            {
    219              PID_Struct->wIntegral = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE014             B.N      ??PID_Regulator_1
    220            }
    221            else
    222            { 
    223              wIntegral_Term = PID_Struct->hKi_Gain * wError;
    224              dwAux = PID_Struct->wIntegral + (s64)(wIntegral_Term);
   \                     ??PID_Regulator_0:
   \   00000016   0x6954             LDR      R4,[R2, #+20]
   \   00000018   0x17E5             ASRS     R5,R4,#+31
   \   0000001A   0x4348             MULS     R0,R0,R1
   \   0000001C   0x1824             ADDS     R4,R4,R0
   \   0000001E   0xEB55 0x75E0      ADCS     R5,R5,R0, ASR #+31
    225              
    226              if (dwAux > PID_Struct->wUpper_Limit_Integral)
   \   00000022   0x6910             LDR      R0,[R2, #+16]
   \   00000024   0x17C1             ASRS     R1,R0,#+31
   \   00000026   0x42A9             CMP      R1,R5
   \   00000028   0xDC02             BGT.N    ??PID_Regulator_2
   \   0000002A   0xDB09             BLT.N    ??PID_Regulator_1
   \   0000002C   0x42A0             CMP      R0,R4
   \   0000002E   0xD307             BCC.N    ??PID_Regulator_1
    227              {
    228                PID_Struct->wIntegral = PID_Struct->wUpper_Limit_Integral;
    229              }
    230              else if (dwAux < PID_Struct->wLower_Limit_Integral)
   \                     ??PID_Regulator_2:
   \   00000030   0x68D0             LDR      R0,[R2, #+12]
   \   00000032   0xEBB5 0x7FE0      CMP      R5,R0, ASR #+31
   \   00000036   0xDC02             BGT.N    ??PID_Regulator_3
   \   00000038   0xDB02             BLT.N    ??PID_Regulator_1
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD300             BCC.N    ??PID_Regulator_1
    231                    { 
    232                      PID_Struct->wIntegral = PID_Struct->wLower_Limit_Integral;
    233                    }
    234                    else
    235                    {
    236                     PID_Struct->wIntegral = (s32)(dwAux);
   \                     ??PID_Regulator_3:
   \   0000003E   0x4620             MOV      R0,R4
   \                     ??PID_Regulator_1:
   \   00000040   0x6150             STR      R0,[R2, #+20]
    237                    }
    238            }
    239            // Differential term computation
    240          #ifdef DIFFERENTIAL_TERM_ENABLED
    241            {
    242            s32 wtemp;
    243            
    244            wtemp = wError - PID_Struct->wPreviousError;
    245            wDifferential_Term = PID_Struct->hKd_Gain * wtemp;
    246            PID_Struct->wPreviousError = wError;    // store value 
    247            }
    248            houtput_32 = (wProportional_Term/PID_Struct->hKp_Divisor+ 
    249                          PID_Struct->wIntegral/PID_Struct->hKi_Divisor + 
    250                          wDifferential_Term/PID_Struct->hKd_Divisor); 
    251          
    252          #else  
    253            houtput_32 = (wProportional_Term/PID_Struct->hKp_Divisor+ 
    254                          PID_Struct->wIntegral/PID_Struct->hKi_Divisor);
   \   00000042   0x8850             LDRH     R0,[R2, #+2]
   \   00000044   0xFB93 0xF0F0      SDIV     R0,R3,R0
   \   00000048   0x6951             LDR      R1,[R2, #+20]
   \   0000004A   0x88D3             LDRH     R3,[R2, #+6]
   \   0000004C   0xFB91 0xF1F3      SDIV     R1,R1,R3
   \   00000050   0x1809             ADDS     R1,R1,R0
    255          #endif
    256            
    257              if (houtput_32 >= PID_Struct->hUpper_Limit_Output)
   \   00000052   0xF9B2 0x000A      LDRSH    R0,[R2, #+10]
   \   00000056   0x4281             CMP      R1,R0
   \   00000058   0xDA04             BGE.N    ??PID_Regulator_4
    258                {
    259                return(PID_Struct->hUpper_Limit_Output);		  			 	
    260                }
    261              else if (houtput_32 < PID_Struct->hLower_Limit_Output)
   \   0000005A   0xF9B2 0x0008      LDRSH    R0,[R2, #+8]
   \   0000005E   0x4281             CMP      R1,R0
   \   00000060   0xBFA8             IT       GE 
   \   00000062   0xB208             SXTHGE   R0,R1
    262                {
    263                return(PID_Struct->hLower_Limit_Output);
    264                }
    265              else 
    266                {
    267                  return((s16)(houtput_32)); 		
   \                     ??PID_Regulator_4:
   \   00000064   0xBC30             POP      {R4,R5}
   \   00000066   0x4770             BX       LR               ;; return
    268                }
    269          }		   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     hTorque_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x0FFFE000         DC32     0xfffe000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     hFlux_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     hSpeed_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0xFFFFF37C         DC32     0xfffff37c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0xFFF37C00         DC32     0xfff37c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x000C8400         DC32     0xc8400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0xFFFF9C00         DC32     0xffff9c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0xFFFFF956         DC32     0xfffff956

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0xFFFFE556         DC32     0xffffe556
    270          
    271          /******************** (C) COPYRIGHT 2008 STMicroelectronics *******************/
    272          
    273          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       28  PID_Init
        8  PID_Regulator
        0  PID_Speed_Coefficients_update


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
     184  PID_Init
     104  PID_Regulator
     166  PID_Speed_Coefficients_update

 
 498 bytes in section .text
 
 498 bytes of CODE memory

Errors: none
Warnings: 3
