###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     24/Feb/2014  19:26:50 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\stm32\STM32F10XFWLIB\src\stm32f10x_wwdg.c             #
#    Command line =  D:\stm32\STM32F10XFWLIB\src\stm32f10x_wwdg.c -D          #
#                    VECT_TAB_FLASH -lCN "D:\stm32\BLDC                       #
#                    PMSM2\EWARM\Debug\List\" --diag_error Pe068,Pe069 -o     #
#                    "D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\" --debug           #
#                    --endian=little --cpu=Cortex-M3 --fpu=None               #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\" -I "D:\stm32\BLDC        #
#                    PMSM2\EWARM\..\..\STM32F10XFWLIB\inc\" -I                #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\inc\" -Oh                  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  D:\stm32\BLDC PMSM2\EWARM\Debug\List\stm32f10x_wwdg.lst  #
#    Object file  =  D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\stm32f10x_wwdg.o     #
#                                                                             #
#                                                                             #
###############################################################################

D:\stm32\STM32F10XFWLIB\src\stm32f10x_wwdg.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_wwdg.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0
      5          * Date               : 05/23/2008
      6          * Description        : This file provides all the WWDG firmware functions.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED 
     15          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "stm32f10x_wwdg.h"
     20          #include "stm32f10x_rcc.h"
     21          
     22          /* Private typedef -----------------------------------------------------------*/
     23          /* Private define ------------------------------------------------------------*/
     24          /* ----------- WWDG registers bit address in the alias region ----------- */
     25          #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
     26          
     27          /* Alias word address of EWI bit */
     28          #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
     29          #define EWI_BitNumber     0x09
     30          #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
     31          
     32          /* Alias word address of EWIF bit */
     33          #define SR_OFFSET         (WWDG_OFFSET + 0x08)
     34          #define EWIF_BitNumber    0x00
     35          #define SR_EWIF_BB        (PERIPH_BB_BASE + (SR_OFFSET * 32) + (EWIF_BitNumber * 4))
     36          
     37          /* --------------------- WWDG registers bit mask ------------------------ */
     38          /* CR register bit mask */
     39          #define CR_WDGA_Set       ((u32)0x00000080)
     40          
     41          /* CFR register bit mask */
     42          #define CFR_WDGTB_Mask    ((u32)0xFFFFFE7F)
     43          #define CFR_W_Mask        ((u32)0xFFFFFF80)
     44          
     45          #define BIT_Mask          ((u8)0x7F)
     46          
     47          /* Private macro -------------------------------------------------------------*/
     48          /* Private variables ---------------------------------------------------------*/
     49          /* Private function prototypes -----------------------------------------------*/
     50          /* Private functions ---------------------------------------------------------*/
     51          
     52          /*******************************************************************************
     53          * Function Name  : WWDG_DeInit
     54          * Description    : Deinitializes the WWDG  peripheral registers to their default
     55          *                  reset values.
     56          * Input          : None
     57          * Output         : None
     58          * Return         : None
     59          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     60          void WWDG_DeInit(void)
     61          {
   \                     WWDG_DeInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     62            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x6000      MOV      R0,#+2048
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
     63            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000012   0xE8BD 0x4004      POP      {R2,LR}
   \   00000016   0x.... 0x....      B.W      RCC_APB1PeriphResetCmd
     64          }
     65          
     66          /*******************************************************************************
     67          * Function Name  : WWDG_SetPrescaler
     68          * Description    : Sets the WWDG Prescaler.
     69          * Input          : - WWDG_Prescaler: specifies the WWDG Prescaler.
     70          *                    This parameter can be one of the following values:
     71          *                       - WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
     72          *                       - WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
     73          *                       - WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
     74          *                       - WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
     75          * Output         : None
     76          * Return         : None
     77          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     78          void WWDG_SetPrescaler(u32 WWDG_Prescaler)
     79          {
     80            u32 tmpreg = 0;
     81          
     82            /* Check the parameters */
     83            assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
     84          
     85            /* Clear WDGTB[1:0] bits */
     86            tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
   \                     WWDG_SetPrescaler:
   \   00000000   0x....             LDR.N    R1,??DataTable5  ;; 0x40002c04
   \   00000002   0x680A             LDR      R2,[R1, #+0]
     87          
     88            /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
     89            tmpreg |= WWDG_Prescaler;
     90          
     91            /* Store the new value */
     92            WWDG->CFR = tmpreg;
   \   00000004   0xF422 0x72C0      BIC      R2,R2,#0x180
   \   00000008   0x4310             ORRS     R0,R0,R2
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     93          }
   \   0000000C   0x4770             BX       LR               ;; return
     94          
     95          /*******************************************************************************
     96          * Function Name  : WWDG_SetWindowValue
     97          * Description    : Sets the WWDG window value.
     98          * Input          : - WindowValue: specifies the window value to be compared to
     99          *                    the downcounter.
    100          *                    This parameter value must be lower than 0x80.
    101          * Output         : None
    102          * Return         : None
    103          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    104          void WWDG_SetWindowValue(u8 WindowValue)
    105          {
    106            u32 tmpreg = 0;
    107          
    108            /* Check the parameters */
    109            assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
    110          
    111            /* Clear W[6:0] bits */
    112            tmpreg = WWDG->CFR & CFR_W_Mask;
   \                     WWDG_SetWindowValue:
   \   00000000   0x....             LDR.N    R1,??DataTable5  ;; 0x40002c04
   \   00000002   0x680A             LDR      R2,[R1, #+0]
    113          
    114            /* Set W[6:0] bits according to WindowValue value */
    115            tmpreg |= WindowValue & BIT_Mask;
    116          
    117            /* Store the new value */
    118            WWDG->CFR = tmpreg;
   \   00000004   0x09D2             LSRS     R2,R2,#+7
   \   00000006   0xF000 0x007F      AND      R0,R0,#0x7F
   \   0000000A   0xEA50 0x10C2      ORRS     R0,R0,R2, LSL #+7
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    119          }
   \   00000010   0x4770             BX       LR               ;; return
    120          
    121          /*******************************************************************************
    122          * Function Name  : WWDG_EnableIT
    123          * Description    : Enables the WWDG Early Wakeup interrupt(EWI).
    124          * Input          : None
    125          * Output         : None
    126          * Return         : None
    127          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    128          void WWDG_EnableIT(void)
    129          {
    130            *(vu32 *) CFR_EWI_BB = (u32)ENABLE;
   \                     WWDG_EnableIT:
   \   00000000   0x....             LDR.N    R0,??DataTable5_1  ;; 0x420580a4
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x6001             STR      R1,[R0, #+0]
    131          }
   \   00000006   0x4770             BX       LR               ;; return
    132          
    133          /*******************************************************************************
    134          * Function Name  : WWDG_SetCounter
    135          * Description    : Sets the WWDG counter value.
    136          * Input          : - Counter: specifies the watchdog counter value.
    137          *                    This parameter must be a number between 0x40 and 0x7F.
    138          * Output         : None
    139          * Return         : None
    140          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          void WWDG_SetCounter(u8 Counter)
    142          {
    143            /* Check the parameters */
    144            assert_param(IS_WWDG_COUNTER(Counter));
    145          
    146            /* Write to T[6:0] bits to configure the counter value, no need to do
    147               a read-modify-write; writing a 0 to WDGA bit does nothing */
    148            WWDG->CR = Counter & BIT_Mask;
   \                     WWDG_SetCounter:
   \   00000000   0xF000 0x007F      AND      R0,R0,#0x7F
   \   00000004   0x....             B.N      ?Subroutine0
    149          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x....             LDR.N    R1,??DataTable5_2  ;; 0x40002c00
   \   00000002   0x6008             STR      R0,[R1, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    150          
    151          /*******************************************************************************
    152          * Function Name  : WWDG_Enable
    153          * Description    : Enables WWDG and load the counter value.
    154          *                  - Counter: specifies the watchdog counter value.
    155          *                    This parameter must be a number between 0x40 and 0x7F.
    156          * Input          : None
    157          * Output         : None
    158          * Return         : None
    159          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    160          void WWDG_Enable(u8 Counter)
    161          {
    162            /* Check the parameters */
    163            assert_param(IS_WWDG_COUNTER(Counter));
    164          
    165            WWDG->CR = CR_WDGA_Set | Counter;
   \                     WWDG_Enable:
   \   00000000   0xF040 0x0080      ORR      R0,R0,#0x80
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0
    166          }
    167          
    168          /*******************************************************************************
    169          * Function Name  : WWDG_GetFlagStatus
    170          * Description    : Checks whether the Early Wakeup interrupt flag is set or not.
    171          * Input          : None
    172          * Output         : None
    173          * Return         : The new state of the Early Wakeup interrupt flag (SET or RESET)
    174          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    175          FlagStatus WWDG_GetFlagStatus(void)
    176          {
    177            return (FlagStatus)(*(vu32 *) SR_EWIF_BB);
   \                     WWDG_GetFlagStatus:
   \   00000000   0x....             LDR.N    R0,??DataTable5_3  ;; 0x42058100
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x4770             BX       LR               ;; return
    178          }
    179          
    180          /*******************************************************************************
    181          * Function Name  : WWDG_ClearFlag
    182          * Description    : Clears Early Wakeup interrupt flag.
    183          * Input          : None
    184          * Output         : None
    185          * Return         : None
    186          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    187          void WWDG_ClearFlag(void)
    188          {
    189            WWDG->SR = (u32)RESET;
   \                     WWDG_ClearFlag:
   \   00000000   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40002c08
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    190          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40002C04         DC32     0x40002c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x420580A4         DC32     0x420580a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40002C00         DC32     0x40002c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x42058100         DC32     0x42058100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40002C08         DC32     0x40002c08
    191          
    192          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  WWDG_ClearFlag
        8  WWDG_DeInit
             0 -> RCC_APB1PeriphResetCmd
             8 -> RCC_APB1PeriphResetCmd
        0  WWDG_Enable
        0  WWDG_EnableIT
        0  WWDG_GetFlagStatus
        0  WWDG_SetCounter
        0  WWDG_SetPrescaler
        0  WWDG_SetWindowValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       6  ?Subroutine0
       8  WWDG_ClearFlag
      26  WWDG_DeInit
       4  WWDG_Enable
       8  WWDG_EnableIT
       8  WWDG_GetFlagStatus
       6  WWDG_SetCounter
      14  WWDG_SetPrescaler
      18  WWDG_SetWindowValue

 
 118 bytes in section .text
 
 118 bytes of CODE memory

Errors: none
Warnings: none
