###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     24/Feb/2014  19:26:36 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\stm32\BLDC PMSM2\src\MC_Display.c                     #
#    Command line =  "D:\stm32\BLDC PMSM2\src\MC_Display.c" -D                #
#                    VECT_TAB_FLASH -lCN "D:\stm32\BLDC                       #
#                    PMSM2\EWARM\Debug\List\" --diag_error Pe068,Pe069 -o     #
#                    "D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\" --no_scheduling   #
#                    --debug --endian=little --cpu=Cortex-M3 --fpu=None       #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\" -I "D:\stm32\BLDC        #
#                    PMSM2\EWARM\..\..\STM32F10XFWLIB\inc\" -I                #
#                    "D:\stm32\BLDC PMSM2\EWARM\..\inc\" -Oh                  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  D:\stm32\BLDC PMSM2\EWARM\Debug\List\MC_Display.lst      #
#    Object file  =  D:\stm32\BLDC PMSM2\EWARM\Debug\Obj\MC_Display.o         #
#                                                                             #
#                                                                             #
###############################################################################

D:\stm32\BLDC PMSM2\src\MC_Display.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : MC_Display.c
      3          * Author             : IMS Systems Lab 
      4          * Date First Issued  : 21/11/07
      5          * Description        : This file contains the software implementation of the
      6          *                      display routines
      7          ********************************************************************************
      8          * History:
      9          * 21/11/07 v1.0
     10          * 29/05/08 v2.0
     11          * 14/07/08 v2.0.1
     12          ********************************************************************************
     13          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     15          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     16          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     17          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     18          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19          *
     20          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     21          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     22          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     23          *******************************************************************************/
     24          /* Standard include ----------------------------------------------------------*/
     25          #include "stm32f10x_lib.h"  
     26          
     27          /* Include of other module interface headers ---------------------------------*/
     28          /* Local includes ------------------------------------------------------------*/
     29          
     30          #include "stm32f10x_MClib.h"
     31          #include "MC_Globals.h"
     32          
     33          extern u8 bMenu_index;
     34          
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* Private define ------------------------------------------------------------*/
     37          #define BLINKING_TIME   5  // 5 * timebase_display_5 ms
     38          
     39          #define VISUALIZATION_1   (u8)1
     40          #define VISUALIZATION_2   (u8)2
     41          #define VISUALIZATION_3   (u8)3
     42          #define VISUALIZATION_4   (u8)4
     43          #define VISUALIZATION_5   (u8)5
     44          #define VISUALIZATION_6   (u8)6
     45          #define VISUALIZATION_7   (u8)7
     46          #define VISUALIZATION_8   (u8)8
     47          #define VISUALIZATION_9   (u8)9
     48          #define VISUALIZATION_10  (u8)10
     49          #ifdef FLUX_WEAKENING
     50          #define VISUALIZATION_11  (u8)11
     51          #endif
     52          
     53          #define CHAR_0            (u8)0 //First character of the line starting from the left
     54          #define CHAR_1            (u8)1 
     55          #define CHAR_2            (u8)2
     56          #define CHAR_3            (u8)3
     57          #define CHAR_4            (u8)4
     58          #define CHAR_5            (u8)5
     59          #define CHAR_6            (u8)6
     60          #define CHAR_7            (u8)7
     61          #define CHAR_8            (u8)8
     62          #define CHAR_9            (u8)9
     63          #define CHAR_10           (u8)10
     64          #define CHAR_11           (u8)11
     65          #define CHAR_12           (u8)12
     66          #define CHAR_13           (u8)13
     67          #define CHAR_14           (u8)14
     68          #define CHAR_15           (u8)15
     69          #define CHAR_16           (u8)16
     70          #define CHAR_17           (u8)17
     71          
     72          #ifdef OBSERVER_GAIN_TUNING 
     73          #define CHAR_18           (u8)18
     74          #endif
     75          
     76          #ifdef DAC_FUNCTIONALITY
     77          #define CHAR_19           (u8)19
     78          #endif
     79          
     80          /* Private macro -------------------------------------------------------------*/
     81          /* Private functions ---------------------------------------------------------*/
     82          void Display_5DigitSignedNumber(u8, u8, s16);
     83          u8 ComputeVisualization(u8 );
     84          
     85          /* Private variables ---------------------------------------------------------*/
     86          volatile static u16 hTimebase_Blinking;

   \                                 In section .bss, align 1
     87          static u8 bPrevious_Visualization = 0;
   \                     bPrevious_Visualization:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
     88          static u8 bPresent_Visualization;
     89          
     90          #ifdef FLUX_WEAKENING
     91          extern s16 hFW_V_Ref;
     92          extern s16 hFW_P_Gain;
     93          extern s16 hFW_I_Gain;
     94          extern s16 hVMagn;
     95          #endif
     96          
     97          #ifdef OBSERVER_GAIN_TUNING
     98          extern volatile s32 wK1_LO;
     99          extern volatile s32 wK2_LO;
    100          extern volatile s16 hPLL_P_Gain, hPLL_I_Gain;
    101          #endif
    102          
    103          /*******************************************************************************
    104          * Function Name  : Display_Welcome_Message
    105          * Description    : Welcome message on LCD after power-up
    106          * Input          : None
    107          * Output         : None
    108          * Return         : None
    109          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    110          void Display_Welcome_Message(void)
    111          {
   \                     Display_Welcome_Message:
   \   00000000   0xB580             PUSH     {R7,LR}
    112            u8 *ptr = " STM32 Motor Control";
    113            
    114            LCD_DisplayStringLine(Line0, ptr);
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant " STM32 Motor Control">`
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       LCD_DisplayStringLine
    115            
    116            ptr = "  PMSM FOC ver 2.0  ";
    117            LCD_DisplayStringLine(Line1, ptr);
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "  PMSM FOC ver 2.0  ">`
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       LCD_DisplayStringLine
    118              
    119            ptr = " <> Move  ^| Change ";
    120            LCD_DisplayStringLine(Line9, ptr);  
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   0000001A   0x2009             MOVS     R0,#+9
   \   0000001C   0xE8BD 0x4004      POP      {R2,LR}
   \   00000020   0x.... 0x....      B.W      LCD_DisplayStringLine
    121            
    122            
    123            //Display_5DigitSignedNumber(Line4*24,2,12345);          
    124          }  
    125          
    126          /*******************************************************************************
    127          * Function Name  : Display_LCD
    128          * Description    : Display routine for LCD management
    129          * Input          : None
    130          * Output         : None
    131          * Return         : None
    132          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    133          void Display_LCD(void)
    134          {          
   \                     Display_LCD:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    135            if (TB_DisplayDelay_IsElapsed() == TRUE) 
   \   00000002   0x.... 0x....      BL       TB_DisplayDelay_IsElapsed
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xF040 0x8502      BNE.W    ??Display_LCD_1
    136            { 
    137              TB_Set_DisplayDelay_500us(500);  //  refresh LCD every 400*5 = 200 ms
   \   0000000C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000010   0x.... 0x....      BL       TB_Set_DisplayDelay_500us
    138          
    139              bPrevious_Visualization = bPresent_Visualization;
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable46
   \   00000018   0x786E             LDRB     R6,[R5, #+1]
   \   0000001A   0x702E             STRB     R6,[R5, #+0]
    140          
    141              bPresent_Visualization = ComputeVisualization(bMenu_index);
   \   0000001C   0x.... 0x....      LDR.W    R4,??DataTable46_1
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x.... 0x....      BL       ComputeVisualization
   \   00000026   0x7068             STRB     R0,[R5, #+1]
    142            
    143              switch(bPresent_Visualization)
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0x2809             CMP      R0,#+9
   \   0000002C   0xF200 0x84F0      BHI.W    ??Display_LCD_1
   \   00000030   0xE8DF 0xF010      TBH      [PC, R0, LSL #+1]
   \                     ??Display_LCD_0:
   \   00000034   0x000A 0x0059      DC16     0xA,0x59,0xDE,0x15D
   \              0x00DE 0x015D
   \   0000003C   0x01DC 0x0252      DC16     0x1DC,0x252,0x2E4,0x3B3
   \              0x02E4 0x03B3
   \   00000044   0x03D4 0x049A      DC16     0x3D4,0x49A
    144              {
    145                u8 *ptr;
    146                s16 temp;
    147                      
    148                case(VISUALIZATION_1):
    149                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_2:
   \   00000048   0x2E01             CMP      R6,#+1
   \   0000004A   0xD01F             BEQ.N    ??Display_LCD_3
    150                  { 
    151          #ifdef NO_SPEED_SENSORS          
    152                    ptr = "   Sensorless Demo  ";
    153                    LCD_DisplayStringLine(Line2,ptr);
   \   0000004C   0x.... 0x....      ADR.W    R1,`?<Constant "   Sensorless Demo  ">`
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x.... 0x....      BL       LCD_DisplayStringLine
    154          #else          
    155                    LCD_ClearLine(Line2);
    156          #endif          
    157                    LCD_ClearLine(Line3); 
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0x.... 0x....      BL       LCD_ClearLine
    158                    
    159                    LCD_ClearLine(Line4); 
   \   0000005C   0x2004             MOVS     R0,#+4
   \   0000005E   0x.... 0x....      BL       LCD_ClearLine
    160                           
    161                    ptr = " Target     Measured";
    162                    LCD_DisplayStringLine(Line5,ptr); 
   \   00000062   0x.... 0x....      ADR.W    R1,`?<Constant " Target     Measured">`
   \   00000066   0x2005             MOVS     R0,#+5
   \   00000068   0x.... 0x....      BL       LCD_DisplayStringLine
    163                    
    164                    ptr = "       (rpm)        ";
    165                    LCD_DisplayStringLine(Line7,ptr); 
   \   0000006C   0x.... 0x....      ADR.W    R1,`?<Constant "       (rpm)        ">`
   \   00000070   0x2007             MOVS     R0,#+7
   \   00000072   0x.... 0x....      BL       LCD_DisplayStringLine
    166                    
    167                    LCD_ClearLine(Line6);        
   \   00000076   0x2006             MOVS     R0,#+6
   \   00000078   0x.... 0x....      BL       LCD_ClearLine
    168                    
    169                    LCD_ClearLine(Line8);
   \   0000007C   0x2008             MOVS     R0,#+8
   \   0000007E   0x.... 0x....      BL       LCD_ClearLine
    170                    
    171                    ptr = " <> Move  ^| Change ";          
    172                    LCD_DisplayStringLine(Line9, ptr); 
   \   00000082   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000086   0x2009             MOVS     R0,#+9
   \   00000088   0x.... 0x....      BL       LCD_DisplayStringLine
    173                  }
    174                  
    175                  if(bMenu_index == CONTROL_MODE_MENU_1)
   \                     ??Display_LCD_3:
   \   0000008C   0x7820             LDRB     R0,[R4, #+0]
   \   0000008E   0xB918             CBNZ.N   R0,??Display_LCD_4
    176                  {
    177                    LCD_SetTextColor(Red);
   \   00000090   0xF44F 0x4078      MOV      R0,#+63488
   \   00000094   0x.... 0x....      BL       LCD_SetTextColor
    178                  }        
    179                  
    180                  ptr = " Speed control mode";        
    181                  LCD_DisplayStringLine(Line3,ptr);
   \                     ??Display_LCD_4:
   \   00000098   0x.... 0x....      ADR.W    R1,`?<Constant " Speed control mode">`
   \   0000009C   0x2003             MOVS     R0,#+3
   \   0000009E   0x.... 0x....      BL       LCD_DisplayStringLine
    182                  
    183                  if(bMenu_index == CONTROL_MODE_MENU_1)
   \   000000A2   0x7820             LDRB     R0,[R4, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xBF0C             ITE      EQ 
   \   000000A8   0x201F             MOVEQ    R0,#+31
   \   000000AA   0xF44F 0x4078      MOVNE    R0,#+63488
    184                  {
    185                    LCD_SetTextColor(Blue);
    186                  }
    187                  else //REF_SPEED_MENU
    188                  {
    189                    LCD_SetTextColor(Red);
   \   000000AE   0x.... 0x....      BL       LCD_SetTextColor
    190                  }
    191                    
    192                  //Compute target speed in rpm
    193                  temp = (s16)(hSpeed_Reference * 6);                 
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable46_2
   \   000000B6   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
    194                  Display_5DigitSignedNumber(Line7, CHAR_0, temp);
   \   000000BA   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000000BE   0x004A             LSLS     R2,R1,#+1
   \   000000C0   0xB212             SXTH     R2,R2
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x2007             MOVS     R0,#+7
   \   000000C6   0x.... 0x....      BL       Display_5DigitSignedNumber
    195                  
    196                  if(bMenu_index != CONTROL_MODE_MENU_1)
   \   000000CA   0x7820             LDRB     R0,[R4, #+0]
   \   000000CC   0xB110             CBZ.N    R0,??Display_LCD_5
    197                  {
    198                    LCD_SetTextColor(Blue);
   \   000000CE   0x201F             MOVS     R0,#+31
   \   000000D0   0x.... 0x....      BL       LCD_SetTextColor
    199                  }
    200                   
    201                  //Compute measured speed in rpm
    202          #ifdef ENCODER
    203                  temp = (s16)(ENC_Get_Mechanical_Speed() * 6);
    204          #endif        
    205          #if defined HALL_SENSORS
    206                  temp = (s16)(HALL_GetSpeed()* 6 );//
    207          #endif
    208          #if defined NO_SPEED_SENSORS        
    209                  temp = (s16)(STO_Get_Speed_Hz() * 6);
   \                     ??Display_LCD_5:
   \   000000D4   0x.... 0x....      BL       STO_Get_Speed_Hz
    210          #endif        
    211                  Display_5DigitSignedNumber(Line7, CHAR_13, temp); 
   \   000000D8   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000000DC   0x004A             LSLS     R2,R1,#+1
   \   000000DE   0xB212             SXTH     R2,R2
   \   000000E0   0x210D             MOVS     R1,#+13
   \   000000E2   0xF000 0xBC16      B.W      ??Display_LCD_6
    212                
    213                break;
    214                    
    215                case(VISUALIZATION_2):
    216                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_7:
   \   000000E6   0x2E02             CMP      R6,#+2
   \   000000E8   0xD021             BEQ.N    ??Display_LCD_8
    217                  {           
    218                    ptr = "       Speed        ";
    219                    LCD_DisplayStringLine(Line2,ptr);
   \   000000EA   0x.... 0x....      ADR.W    R1,`?<Constant "       Speed        ">`
   \   000000EE   0x2002             MOVS     R0,#+2
   \   000000F0   0x.... 0x....      BL       LCD_DisplayStringLine
    220                    
    221                    ptr = "    P     I     D   ";
    222                    LCD_DisplayStringLine(Line3,ptr); 
   \   000000F4   0x.... 0x....      ADR.W    R1,`?<Constant "    P     I     D   ">`
   \   000000F8   0x2003             MOVS     R0,#+3
   \   000000FA   0x.... 0x....      BL       LCD_DisplayStringLine
    223                    
    224                    LCD_ClearLine(Line4);
   \   000000FE   0x2004             MOVS     R0,#+4
   \   00000100   0x.... 0x....      BL       LCD_ClearLine
    225                    LCD_ClearLine(Line5);
   \   00000104   0x2005             MOVS     R0,#+5
   \   00000106   0x.... 0x....      BL       LCD_ClearLine
    226                     
    227                    ptr = " Target        (rpm)";
    228                    LCD_DisplayStringLine(Line6,ptr); 
   \   0000010A   0x.... 0x....      ADR.W    R1,`?<Constant " Target        (rpm)">`
   \   0000010E   0x2006             MOVS     R0,#+6
   \   00000110   0x.... 0x....      BL       LCD_DisplayStringLine
    229                    
    230                    ptr = " Measured      (rpm)";
    231                    LCD_DisplayStringLine(Line7,ptr);
   \   00000114   0x.... 0x....      ADR.W    R1,`?<Constant " Measured      (rpm)">`
   \   00000118   0x2007             MOVS     R0,#+7
   \   0000011A   0x.... 0x....      BL       LCD_DisplayStringLine
    232                              
    233                    LCD_ClearLine(Line8);
   \   0000011E   0x2008             MOVS     R0,#+8
   \   00000120   0x.... 0x....      BL       LCD_ClearLine
    234                    
    235                    ptr = " <> Move  ^| Change ";          
    236                    LCD_DisplayStringLine(Line9, ptr); 
   \   00000124   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000128   0x2009             MOVS     R0,#+9
   \   0000012A   0x.... 0x....      BL       LCD_DisplayStringLine
    237                  }
    238                  
    239                  switch(bMenu_index)
   \                     ??Display_LCD_8:
   \   0000012E   0x7820             LDRB     R0,[R4, #+0]
   \   00000130   0x2802             CMP      R0,#+2
   \   00000132   0xD002             BEQ.N    ??Display_LCD_9
   \   00000134   0x2803             CMP      R0,#+3
   \   00000136   0xD016             BEQ.N    ??Display_LCD_10
   \   00000138   0xE046             B.N      ??Display_LCD_11
    240                  {
    241                    case(P_SPEED_MENU):
    242                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_9:
   \   0000013A   0xF44F 0x4078      MOV      R0,#+63488
   \   0000013E   0x.... 0x....      BL       LCD_SetTextColor
    243                      temp = PID_Speed_InitStructure.hKp_Gain;
    244                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   00000142   0x.... 0x....      LDR.W    R4,??DataTable46_3
   \   00000146   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   0000014A   0x2101             MOVS     R1,#+1
   \   0000014C   0x2004             MOVS     R0,#+4
   \   0000014E   0x.... 0x....      BL       Display_5DigitSignedNumber
    245                      LCD_SetTextColor(Blue);
   \   00000152   0x201F             MOVS     R0,#+31
   \   00000154   0x.... 0x....      BL       LCD_SetTextColor
    246                      
    247                      temp = PID_Speed_InitStructure.hKi_Gain;
    248                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000158   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   0000015C   0x2107             MOVS     R1,#+7
   \   0000015E   0x2004             MOVS     R0,#+4
   \   00000160   0x.... 0x....      BL       Display_5DigitSignedNumber
    249                      
    250          #ifdef DIFFERENTIAL_TERM_ENABLED            
    251                      temp = PID_Speed_InitStructure.hKd_Gain;
    252                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    253          #else        
    254                      {
    255                        u32 i=0;
    256                        for( i=0; i<5; i++)
    257                        {						  // 320 -
    258                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
   \   00000164   0xE014             B.N      ??Display_LCD_12
    259                        }
    260                      }
    261          #endif         
    262           
    263                   break;
    264                      
    265                    case(I_SPEED_MENU):                                 
    266                      temp = PID_Speed_InitStructure.hKp_Gain;
    267                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_10:
   \   00000166   0x.... 0x....      LDR.W    R4,??DataTable46_3
   \   0000016A   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   0000016E   0x2101             MOVS     R1,#+1
   \   00000170   0x2004             MOVS     R0,#+4
   \   00000172   0x.... 0x....      BL       Display_5DigitSignedNumber
    268                      
    269                      LCD_SetTextColor(Red);   
   \   00000176   0xF44F 0x4078      MOV      R0,#+63488
   \   0000017A   0x.... 0x....      BL       LCD_SetTextColor
    270                      temp = PID_Speed_InitStructure.hKi_Gain;
    271                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   0000017E   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   00000182   0x2107             MOVS     R1,#+7
   \   00000184   0x2004             MOVS     R0,#+4
   \   00000186   0x.... 0x....      BL       Display_5DigitSignedNumber
    272                      LCD_SetTextColor(Blue);
   \   0000018A   0x201F             MOVS     R0,#+31
   \   0000018C   0x.... 0x....      BL       LCD_SetTextColor
    273                      
    274          #ifdef DIFFERENTIAL_TERM_ENABLED            
    275                      temp = PID_Speed_InitStructure.hKd_Gain;
    276                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    277          #else        
    278                      {
    279                        u32 i=0;
    280                        for( i=0; i<5; i++)
    281                        {					   // 320 -
    282                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
   \                     ??Display_LCD_12:
   \   00000190   0x222D             MOVS     R2,#+45
   \   00000192   0xF44F 0x7190      MOV      R1,#+288
   \   00000196   0x2060             MOVS     R0,#+96
   \   00000198   0x.... 0x....      BL       LCD_DisplayChar
   \   0000019C   0x222D             MOVS     R2,#+45
   \   0000019E   0xF44F 0x7188      MOV      R1,#+272
   \   000001A2   0x2060             MOVS     R0,#+96
   \   000001A4   0x.... 0x....      BL       LCD_DisplayChar
   \   000001A8   0x222D             MOVS     R2,#+45
   \   000001AA   0xF44F 0x7180      MOV      R1,#+256
   \   000001AE   0x2060             MOVS     R0,#+96
   \   000001B0   0x.... 0x....      BL       LCD_DisplayChar
   \   000001B4   0x222D             MOVS     R2,#+45
   \   000001B6   0x21F0             MOVS     R1,#+240
   \   000001B8   0x2060             MOVS     R0,#+96
   \   000001BA   0x.... 0x....      BL       LCD_DisplayChar
   \   000001BE   0x222D             MOVS     R2,#+45
   \   000001C0   0x21E0             MOVS     R1,#+224
   \   000001C2   0x2060             MOVS     R0,#+96
   \   000001C4   0x.... 0x....      BL       LCD_DisplayChar
    283                        }
    284                      }
    285          #endif
    286          	      break;
    287                    
    288          #ifdef DIFFERENTIAL_TERM_ENABLED
    289                      case(D_SPEED_MENU):
    290                        temp = PID_Speed_InitStructure.hKp_Gain;
    291                        Display_5DigitSignedNumber(Line4, CHAR_1, temp);
    292                        
    293                        temp = PID_Speed_InitStructure.hKi_Gain;
    294                        Display_5DigitSignedNumber(Line4, CHAR_7, temp);
    295                        
    296                        LCD_SetTextColor(Red);
    297                        temp = PID_Speed_InitStructure.hKd_Gain;
    298                        Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    299                        LCD_SetTextColor(Blue);
    300                    
    301                      break;
    302          #endif
    303                  default:
    304                    break;
    305                  }
    306                  //Independently from the menu, this visualization must display current 
    307                  //and measured speeds
    308                  
    309                  //Display target speed in rpm
    310                  temp = (s16)(hSpeed_Reference * 6);          
   \                     ??Display_LCD_11:
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable46_2
   \   000001CC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
    311                  Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   000001D0   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000001D4   0x004A             LSLS     R2,R1,#+1
   \   000001D6   0xB212             SXTH     R2,R2
   \   000001D8   0x2109             MOVS     R1,#+9
   \   000001DA   0x2006             MOVS     R0,#+6
   \   000001DC   0x.... 0x....      BL       Display_5DigitSignedNumber
    312                  
    313                  //Compute measured speed in rpm
    314          #ifdef ENCODER
    315                  temp = (s16)(ENC_Get_Mechanical_Speed() * 6);
    316          #elif defined HALL_SENSORS
    317                  temp = (s16)(HALL_GetSpeed() * 6);
    318          #elif defined NO_SPEED_SENSORS        
    319                  temp = (s16)(STO_Get_Speed_Hz() * 6);
   \   000001E0   0x.... 0x....      BL       STO_Get_Speed_Hz
    320          #endif
    321                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);         
   \   000001E4   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000001E8   0x004A             LSLS     R2,R1,#+1
   \   000001EA   0xB212             SXTH     R2,R2
   \   000001EC   0x2109             MOVS     R1,#+9
   \   000001EE   0xE390             B.N      ??Display_LCD_6
    322                break;
    323                
    324                case(VISUALIZATION_3):
    325                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_13:
   \   000001F0   0x2E03             CMP      R6,#+3
   \   000001F2   0xD021             BEQ.N    ??Display_LCD_14
    326                  {           
    327                    ptr = "       Torque       ";
    328                    LCD_DisplayStringLine(Line2,ptr);
   \   000001F4   0x.... 0x....      ADR.W    R1,`?<Constant "       Torque       ">`
   \   000001F8   0x2002             MOVS     R0,#+2
   \   000001FA   0x.... 0x....      BL       LCD_DisplayStringLine
    329                    
    330                    ptr = "    P     I     D   ";
    331                    LCD_DisplayStringLine(Line3,ptr); 
   \   000001FE   0x.... 0x....      ADR.W    R1,`?<Constant "    P     I     D   ">`
   \   00000202   0x2003             MOVS     R0,#+3
   \   00000204   0x.... 0x....      BL       LCD_DisplayStringLine
    332                    
    333                    LCD_ClearLine(Line4);
   \   00000208   0x2004             MOVS     R0,#+4
   \   0000020A   0x.... 0x....      BL       LCD_ClearLine
    334                    LCD_ClearLine(Line5);
   \   0000020E   0x2005             MOVS     R0,#+5
   \   00000210   0x.... 0x....      BL       LCD_ClearLine
    335                     
    336                    ptr = " Target         (Iq)";
    337                    LCD_DisplayStringLine(Line6,ptr); 
   \   00000214   0x.... 0x....      ADR.W    R1,`?<Constant " Target         (Iq)">`
   \   00000218   0x2006             MOVS     R0,#+6
   \   0000021A   0x.... 0x....      BL       LCD_DisplayStringLine
    338                    
    339                    ptr = " Measured       (Iq)";
    340                    LCD_DisplayStringLine(Line7,ptr);
   \   0000021E   0x.... 0x....      ADR.W    R1,`?<Constant " Measured       (Iq)">`
   \   00000222   0x2007             MOVS     R0,#+7
   \   00000224   0x.... 0x....      BL       LCD_DisplayStringLine
    341                    
    342                    LCD_ClearLine(Line8);
   \   00000228   0x2008             MOVS     R0,#+8
   \   0000022A   0x.... 0x....      BL       LCD_ClearLine
    343                    
    344                    ptr = " <> Move  ^| Change ";          
    345                    LCD_DisplayStringLine(Line9, ptr); 
   \   0000022E   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000232   0x2009             MOVS     R0,#+9
   \   00000234   0x.... 0x....      BL       LCD_DisplayStringLine
    346                  }
    347                  
    348                  switch(bMenu_index)
   \                     ??Display_LCD_14:
   \   00000238   0x7820             LDRB     R0,[R4, #+0]
   \   0000023A   0x2805             CMP      R0,#+5
   \   0000023C   0xD002             BEQ.N    ??Display_LCD_15
   \   0000023E   0x2806             CMP      R0,#+6
   \   00000240   0xD016             BEQ.N    ??Display_LCD_16
   \   00000242   0xE046             B.N      ??Display_LCD_17
    349                  {
    350                    case(P_TORQUE_MENU):
    351                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_15:
   \   00000244   0xF44F 0x4078      MOV      R0,#+63488
   \   00000248   0x.... 0x....      BL       LCD_SetTextColor
    352                      temp = PID_Torque_InitStructure.hKp_Gain;
    353                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   0000024C   0x.... 0x....      LDR.W    R4,??DataTable46_4
   \   00000250   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000254   0x2101             MOVS     R1,#+1
   \   00000256   0x2004             MOVS     R0,#+4
   \   00000258   0x.... 0x....      BL       Display_5DigitSignedNumber
    354                      LCD_SetTextColor(Blue);
   \   0000025C   0x201F             MOVS     R0,#+31
   \   0000025E   0x.... 0x....      BL       LCD_SetTextColor
    355                      
    356                      temp = PID_Torque_InitStructure.hKi_Gain;
    357                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000262   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   00000266   0x2107             MOVS     R1,#+7
   \   00000268   0x2004             MOVS     R0,#+4
   \   0000026A   0x.... 0x....      BL       Display_5DigitSignedNumber
    358                      
    359          #ifdef DIFFERENTIAL_TERM_ENABLED            
    360                      temp = PID_Torque_InitStructure.hKd_Gain;
    361                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    362          #else        
    363                      {
    364                        u32 i=0;
    365                        for( i=0; i<5; i++)
    366                        {								 //320 -
    367                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
   \   0000026E   0xE014             B.N      ??Display_LCD_18
    368                        }
    369                      }
    370          #endif       
    371                   break;
    372                      
    373                    case(I_TORQUE_MENU):                                 
    374                      temp = PID_Torque_InitStructure.hKp_Gain;
    375                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_16:
   \   00000270   0x.... 0x....      LDR.W    R4,??DataTable46_4
   \   00000274   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000278   0x2101             MOVS     R1,#+1
   \   0000027A   0x2004             MOVS     R0,#+4
   \   0000027C   0x.... 0x....      BL       Display_5DigitSignedNumber
    376                      
    377                      LCD_SetTextColor(Red);   
   \   00000280   0xF44F 0x4078      MOV      R0,#+63488
   \   00000284   0x.... 0x....      BL       LCD_SetTextColor
    378                      temp = PID_Torque_InitStructure.hKi_Gain;
    379                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000288   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   0000028C   0x2107             MOVS     R1,#+7
   \   0000028E   0x2004             MOVS     R0,#+4
   \   00000290   0x.... 0x....      BL       Display_5DigitSignedNumber
    380                      LCD_SetTextColor(Blue);
   \   00000294   0x201F             MOVS     R0,#+31
   \   00000296   0x.... 0x....      BL       LCD_SetTextColor
    381                      
    382          #ifdef DIFFERENTIAL_TERM_ENABLED             
    383                      temp = PID_Torque_InitStructure.hKd_Gain;
    384                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    385          #else        
    386                      {
    387                        u32 i=0;
    388                        for( i=0; i<5; i++)
    389                        {								  //320 -
    390                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
   \                     ??Display_LCD_18:
   \   0000029A   0x222D             MOVS     R2,#+45
   \   0000029C   0xF44F 0x7190      MOV      R1,#+288
   \   000002A0   0x2060             MOVS     R0,#+96
   \   000002A2   0x.... 0x....      BL       LCD_DisplayChar
   \   000002A6   0x222D             MOVS     R2,#+45
   \   000002A8   0xF44F 0x7188      MOV      R1,#+272
   \   000002AC   0x2060             MOVS     R0,#+96
   \   000002AE   0x.... 0x....      BL       LCD_DisplayChar
   \   000002B2   0x222D             MOVS     R2,#+45
   \   000002B4   0xF44F 0x7180      MOV      R1,#+256
   \   000002B8   0x2060             MOVS     R0,#+96
   \   000002BA   0x.... 0x....      BL       LCD_DisplayChar
   \   000002BE   0x222D             MOVS     R2,#+45
   \   000002C0   0x21F0             MOVS     R1,#+240
   \   000002C2   0x2060             MOVS     R0,#+96
   \   000002C4   0x.... 0x....      BL       LCD_DisplayChar
   \   000002C8   0x222D             MOVS     R2,#+45
   \   000002CA   0x21E0             MOVS     R1,#+224
   \   000002CC   0x2060             MOVS     R0,#+96
   \   000002CE   0x.... 0x....      BL       LCD_DisplayChar
    391                        }
    392                      }
    393          #endif
    394                     break;
    395                    
    396          #ifdef DIFFERENTIAL_TERM_ENABLED 
    397                      case(D_TORQUE_MENU):
    398                        temp = PID_Torque_InitStructure.hKp_Gain;
    399                        Display_5DigitSignedNumber(Line4, CHAR_1, temp);
    400                        
    401                        temp = PID_Torque_InitStructure.hKi_Gain;
    402                        Display_5DigitSignedNumber(Line4, CHAR_7, temp);
    403                        
    404                        LCD_SetTextColor(Red);
    405                        temp = PID_Torque_InitStructure.hKd_Gain;
    406                        Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    407                        LCD_SetTextColor(Blue);
    408                        
    409                      break;
    410          #endif
    411                  default:
    412                    break;
    413                  }
    414                  //Independently from the menu, this visualization must display current 
    415                  //and measured Iq
    416                  
    417                  temp = hTorque_Reference;          
   \                     ??Display_LCD_17:
   \   000002D2   0x.... 0x....      LDR.W    R0,??DataTable46_5
   \   000002D6   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    418                  Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   000002DA   0x2109             MOVS     R1,#+9
   \   000002DC   0x2006             MOVS     R0,#+6
   \   000002DE   0x.... 0x....      BL       Display_5DigitSignedNumber
    419          
    420                  temp = Stat_Curr_q_d.qI_Component1;
    421                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);        
   \   000002E2   0x.... 0x....      LDR.W    R0,??DataTable46_6
   \   000002E6   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000002EA   0x2109             MOVS     R1,#+9
   \   000002EC   0xE311             B.N      ??Display_LCD_6
    422                break;
    423               
    424                 case(VISUALIZATION_4):
    425                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_19:
   \   000002EE   0x2E04             CMP      R6,#+4
   \   000002F0   0xD021             BEQ.N    ??Display_LCD_20
    426                  {           
    427                    ptr = "        Flux        ";
    428                    LCD_DisplayStringLine(Line2,ptr);
   \   000002F2   0x.... 0x....      ADR.W    R1,`?<Constant "        Flux        ">`
   \   000002F6   0x2002             MOVS     R0,#+2
   \   000002F8   0x.... 0x....      BL       LCD_DisplayStringLine
    429                    
    430                    ptr = "    P     I     D   ";
    431                    LCD_DisplayStringLine(Line3,ptr); 
   \   000002FC   0x.... 0x....      ADR.W    R1,`?<Constant "    P     I     D   ">`
   \   00000300   0x2003             MOVS     R0,#+3
   \   00000302   0x.... 0x....      BL       LCD_DisplayStringLine
    432                    
    433                    LCD_ClearLine(Line4);
   \   00000306   0x2004             MOVS     R0,#+4
   \   00000308   0x.... 0x....      BL       LCD_ClearLine
    434                    LCD_ClearLine(Line5);
   \   0000030C   0x2005             MOVS     R0,#+5
   \   0000030E   0x.... 0x....      BL       LCD_ClearLine
    435                     
    436                    ptr = " Target         (Id)";
    437                    LCD_DisplayStringLine(Line6,ptr); 
   \   00000312   0x.... 0x....      ADR.W    R1,`?<Constant " Target         (Id)">`
   \   00000316   0x2006             MOVS     R0,#+6
   \   00000318   0x.... 0x....      BL       LCD_DisplayStringLine
    438                    
    439                    ptr = " Measured       (Id)";
    440                    LCD_DisplayStringLine(Line7,ptr);
   \   0000031C   0x.... 0x....      ADR.W    R1,`?<Constant " Measured       (Id)">`
   \   00000320   0x2007             MOVS     R0,#+7
   \   00000322   0x.... 0x....      BL       LCD_DisplayStringLine
    441                    
    442                    LCD_ClearLine(Line8);
   \   00000326   0x2008             MOVS     R0,#+8
   \   00000328   0x.... 0x....      BL       LCD_ClearLine
    443                    
    444                    ptr = " <> Move  ^| Change ";          
    445                    LCD_DisplayStringLine(Line9, ptr); 
   \   0000032C   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000330   0x2009             MOVS     R0,#+9
   \   00000332   0x.... 0x....      BL       LCD_DisplayStringLine
    446                  }
    447                  
    448                  switch(bMenu_index)
   \                     ??Display_LCD_20:
   \   00000336   0x7820             LDRB     R0,[R4, #+0]
   \   00000338   0x2808             CMP      R0,#+8
   \   0000033A   0xD002             BEQ.N    ??Display_LCD_21
   \   0000033C   0x2809             CMP      R0,#+9
   \   0000033E   0xD016             BEQ.N    ??Display_LCD_22
   \   00000340   0xE046             B.N      ??Display_LCD_23
    449                  {
    450                    case(P_FLUX_MENU):
    451                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_21:
   \   00000342   0xF44F 0x4078      MOV      R0,#+63488
   \   00000346   0x.... 0x....      BL       LCD_SetTextColor
    452                      temp = PID_Flux_InitStructure.hKp_Gain;
    453                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   0000034A   0x.... 0x....      LDR.W    R4,??DataTable46_7
   \   0000034E   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000352   0x2101             MOVS     R1,#+1
   \   00000354   0x2004             MOVS     R0,#+4
   \   00000356   0x.... 0x....      BL       Display_5DigitSignedNumber
    454                      LCD_SetTextColor(Blue);
   \   0000035A   0x201F             MOVS     R0,#+31
   \   0000035C   0x.... 0x....      BL       LCD_SetTextColor
    455                      
    456                      temp = PID_Flux_InitStructure.hKi_Gain;
    457                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000360   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   00000364   0x2107             MOVS     R1,#+7
   \   00000366   0x2004             MOVS     R0,#+4
   \   00000368   0x.... 0x....      BL       Display_5DigitSignedNumber
    458                      
    459          #ifdef DIFFERENTIAL_TERM_ENABLED            
    460                      temp = PID_Flux_InitStructure.hKd_Gain;
    461                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    462          #else        
    463                      {
    464                        u32 i=0;
    465                        for( i=0; i<5; i++)
    466                        {								 //	320 -
    467                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
   \   0000036C   0xE014             B.N      ??Display_LCD_24
    468                        }
    469                      }
    470          #endif       
    471                    break;
    472                      
    473                    case(I_FLUX_MENU):                                 
    474                      temp = PID_Flux_InitStructure.hKp_Gain;
    475                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_22:
   \   0000036E   0x.... 0x....      LDR.W    R4,??DataTable46_7
   \   00000372   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000376   0x2101             MOVS     R1,#+1
   \   00000378   0x2004             MOVS     R0,#+4
   \   0000037A   0x.... 0x....      BL       Display_5DigitSignedNumber
    476                      
    477                      LCD_SetTextColor(Red);   
   \   0000037E   0xF44F 0x4078      MOV      R0,#+63488
   \   00000382   0x.... 0x....      BL       LCD_SetTextColor
    478                      temp = PID_Flux_InitStructure.hKi_Gain;
    479                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000386   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   0000038A   0x2107             MOVS     R1,#+7
   \   0000038C   0x2004             MOVS     R0,#+4
   \   0000038E   0x.... 0x....      BL       Display_5DigitSignedNumber
    480                      LCD_SetTextColor(Blue);
   \   00000392   0x201F             MOVS     R0,#+31
   \   00000394   0x.... 0x....      BL       LCD_SetTextColor
    481                      
    482          #ifdef DIFFERENTIAL_TERM_ENABLED             
    483                      temp = PID_Flux_InitStructure.hKd_Gain;
    484                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    485          #else        
    486                      {
    487                        u32 i=0;
    488                        for( i=0; i<5; i++)
    489                        {									 //320 -
    490                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
   \                     ??Display_LCD_24:
   \   00000398   0x222D             MOVS     R2,#+45
   \   0000039A   0xF44F 0x7190      MOV      R1,#+288
   \   0000039E   0x2060             MOVS     R0,#+96
   \   000003A0   0x.... 0x....      BL       LCD_DisplayChar
   \   000003A4   0x222D             MOVS     R2,#+45
   \   000003A6   0xF44F 0x7188      MOV      R1,#+272
   \   000003AA   0x2060             MOVS     R0,#+96
   \   000003AC   0x.... 0x....      BL       LCD_DisplayChar
   \   000003B0   0x222D             MOVS     R2,#+45
   \   000003B2   0xF44F 0x7180      MOV      R1,#+256
   \   000003B6   0x2060             MOVS     R0,#+96
   \   000003B8   0x.... 0x....      BL       LCD_DisplayChar
   \   000003BC   0x222D             MOVS     R2,#+45
   \   000003BE   0x21F0             MOVS     R1,#+240
   \   000003C0   0x2060             MOVS     R0,#+96
   \   000003C2   0x.... 0x....      BL       LCD_DisplayChar
   \   000003C6   0x222D             MOVS     R2,#+45
   \   000003C8   0x21E0             MOVS     R1,#+224
   \   000003CA   0x2060             MOVS     R0,#+96
   \   000003CC   0x.... 0x....      BL       LCD_DisplayChar
    491                        }
    492                      }
    493          #endif
    494                     break;
    495                      
    496          #ifdef DIFFERENTIAL_TERM_ENABLED 
    497                      case(D_FLUX_MENU):
    498                        temp = PID_Flux_InitStructure.hKp_Gain;
    499                        Display_5DigitSignedNumber(Line4, CHAR_1, temp);
    500                        
    501                        temp = PID_Flux_InitStructure.hKi_Gain;
    502                        Display_5DigitSignedNumber(Line4, CHAR_7, temp);
    503                        
    504                        LCD_SetTextColor(Red);
    505                        temp = PID_Flux_InitStructure.hKd_Gain;
    506                        Display_5DigitSignedNumber(Line4, CHAR_13, temp);
    507                        LCD_SetTextColor(Blue);
    508                        
    509                      break;
    510          #endif
    511                  default:
    512                    break;
    513                  }
    514                  //Independently from the menu, this visualization must display current 
    515                  //and measured Id
    516                  
    517                  temp = hFlux_Reference;          
   \                     ??Display_LCD_23:
   \   000003D0   0x.... 0x....      LDR.W    R0,??DataTable46_8
   \   000003D4   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    518                  Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   000003D8   0x2109             MOVS     R1,#+9
   \   000003DA   0x2006             MOVS     R0,#+6
   \   000003DC   0x.... 0x....      BL       Display_5DigitSignedNumber
    519          
    520                  temp = Stat_Curr_q_d.qI_Component2;
    521                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);   
   \   000003E0   0x.... 0x....      LDR.W    R0,??DataTable46_6
   \   000003E4   0xF9B0 0x2002      LDRSH    R2,[R0, #+2]
   \   000003E8   0x2109             MOVS     R1,#+9
   \   000003EA   0xE292             B.N      ??Display_LCD_6
    522                break;
    523          
    524          #ifdef FLUX_WEAKENING      
    525                case(VISUALIZATION_11):
    526                  if (bPresent_Visualization != bPrevious_Visualization)
    527                  {           
    528                    ptr = "Flux Weakening Ctrl ";
    529                    LCD_DisplayStringLine(Line2,ptr);
    530                    
    531                    ptr = "    P     I         ";
    532                    LCD_DisplayStringLine(Line3,ptr); 
    533                    
    534                    LCD_ClearLine(Line4);
    535                    LCD_ClearLine(Line5);
    536                     
    537                    ptr = " Target        (Vs%)";
    538                    LCD_DisplayStringLine(Line6,ptr); 
    539                    
    540                    ptr = " Measured      (Vs%)";
    541                    LCD_DisplayStringLine(Line7,ptr);
    542                    
    543                    LCD_ClearLine(Line8);
    544                    
    545                    ptr = " <> Move  ^| Change ";          
    546                    LCD_DisplayStringLine(Line9, ptr); 
    547                  }
    548                  
    549                  switch(bMenu_index)
    550                  {
    551                    case(P_VOLT_MENU):
    552                      LCD_SetTextColor(Red);            
    553                      temp = hFW_P_Gain;
    554                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
    555                      
    556                      LCD_SetTextColor(Blue);            
    557                      temp = hFW_I_Gain;
    558                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
    559                      temp = hFW_V_Ref;
    560                      Display_5DigitSignedNumber(Line6, CHAR_9, temp);
    561                      LCD_DrawRect(161,97,1,2);            
    562                      
    563                      {
    564                        u32 i=0;
    565                        for( i=0; i<5; i++)
    566                        {								   //320 -
    567                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
    568                        }
    569                      }
    570           
    571                   break;
    572                      
    573                    case(I_VOLT_MENU):                                 
    574                      temp = hFW_P_Gain;
    575                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
    576                      temp = hFW_V_Ref;
    577                      Display_5DigitSignedNumber(Line6, CHAR_9, temp);            
    578                      
    579                      LCD_SetTextColor(Red);   
    580                      temp = hFW_I_Gain;
    581                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
    582                      LCD_SetTextColor(Blue);
    583                      LCD_DrawRect(161,97,1,2); 
    584                  
    585                      {
    586                        u32 i=0;
    587                        for( i=0; i<5; i++)
    588                        {									//320 -
    589                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
    590                        }
    591                      }
    592          
    593          	      break;
    594                        
    595                    case(TARGET_VOLT_MENU):
    596                      LCD_SetTextColor(Red);            
    597                      temp = hFW_V_Ref;
    598                      Display_5DigitSignedNumber(Line6, CHAR_9, temp);
    599                      LCD_DrawRect(161,97,1,2);
    600                      
    601                      LCD_SetTextColor(Blue);
    602                      temp = hFW_P_Gain;
    603                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
    604                      temp = hFW_I_Gain;
    605                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
    606                      
    607                      {
    608                        u32 i=0;
    609                        for( i=0; i<5; i++)
    610                        {							   //320 -
    611                          LCD_DisplayChar(Line4*24, (u16)((16*(18-i))),'-');
    612                        }
    613                      }
    614           
    615                   break;              
    616                    
    617                  default:
    618                    break;
    619                  }
    620                  //Independently from the menu, this visualization must display current 
    621                  //and measured voltage level
    622                  
    623                  //Compute applied voltage in s16
    624                  temp = (s16)(((s32)(hVMagn)*1000)/MAX_MODULE);        
    625                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);
    626                  LCD_DrawRect(185,97,1,2);
    627                break;
    628          #endif      
    629                
    630                case(VISUALIZATION_5):
    631                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_25:
   \   000003EC   0x2E05             CMP      R6,#+5
   \   000003EE   0xD01F             BEQ.N    ??Display_LCD_26
    632                  {           
    633                    LCD_ClearLine(Line2);
   \   000003F0   0x2002             MOVS     R0,#+2
   \   000003F2   0x.... 0x....      BL       LCD_ClearLine
    634                    
    635                    ptr = " Power Stage Status ";          
    636                    LCD_DisplayStringLine(Line3, ptr); 
   \   000003F6   0x.... 0x....      ADR.W    R1,`?<Constant " Power Stage Status ">`
   \   000003FA   0x2003             MOVS     R0,#+3
   \   000003FC   0x.... 0x....      BL       LCD_DisplayStringLine
    637                    
    638                    LCD_ClearLine(Line4);
   \   00000400   0x2004             MOVS     R0,#+4
   \   00000402   0x.... 0x....      BL       LCD_ClearLine
    639                    
    640                    ptr = "  DC bus =     Volt ";          
    641                    LCD_DisplayStringLine(Line5, ptr); 
   \   00000406   0x.... 0x....      ADR.W    R1,`?<Constant "  DC bus =     Volt ">`
   \   0000040A   0x2005             MOVS     R0,#+5
   \   0000040C   0x.... 0x....      BL       LCD_DisplayStringLine
    642                    
    643                    LCD_ClearLine(Line6);
   \   00000410   0x2006             MOVS     R0,#+6
   \   00000412   0x.... 0x....      BL       LCD_ClearLine
    644                    
    645                    ptr = "  T =      Celsius  ";          
    646                    LCD_DisplayStringLine(Line7, ptr); 
   \   00000416   0x.... 0x....      ADR.W    R1,`?<Constant "  T =      Celsius  ">`
   \   0000041A   0x2007             MOVS     R0,#+7
   \   0000041C   0x.... 0x....      BL       LCD_DisplayStringLine
    647                    
    648                    LCD_ClearLine(Line8);
   \   00000420   0x2008             MOVS     R0,#+8
   \   00000422   0x.... 0x....      BL       LCD_ClearLine
    649                    
    650                    ptr = " <> Move            ";          
    651                    LCD_DisplayStringLine(Line9, ptr); 
   \   00000426   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move            ">`
   \   0000042A   0x2009             MOVS     R0,#+9
   \   0000042C   0x.... 0x....      BL       LCD_DisplayStringLine
    652                  }
    653                
    654                  temp = MCL_Compute_BusVolt();  //320-      
   \                     ??Display_LCD_26:
   \   00000430   0x.... 0x....      BL       MCL_Compute_BusVolt
   \   00000434   0xB205             SXTH     R5,R0
    655                  LCD_DisplayChar(Line5*24, 16*CHAR_11, (u8)(((temp%1000)/100)+0x30));
   \   00000436   0xF44F 0x707A      MOV      R0,#+1000
   \   0000043A   0x2464             MOVS     R4,#+100
   \   0000043C   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000440   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000444   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \   00000448   0xF100 0x0230      ADD      R2,R0,#+48
   \   0000044C   0xB2D2             UXTB     R2,R2
   \   0000044E   0x21B0             MOVS     R1,#+176
   \   00000450   0x2078             MOVS     R0,#+120
   \   00000452   0x.... 0x....      BL       LCD_DisplayChar
    656                  LCD_DisplayChar(Line5*24, 16*CHAR_12, (u8)(((temp%100)/10)+0x30));
   \   00000456   0x260A             MOVS     R6,#+10
   \   00000458   0xFB95 0xF0F4      SDIV     R0,R5,R4
   \   0000045C   0xFB04 0x5010      MLS      R0,R4,R0,R5
   \   00000460   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   00000464   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000468   0xB2D2             UXTB     R2,R2
   \   0000046A   0x21C0             MOVS     R1,#+192
   \   0000046C   0x2078             MOVS     R0,#+120
   \   0000046E   0x.... 0x....      BL       LCD_DisplayChar
    657                  LCD_DisplayChar(Line5*24, 16*CHAR_13, (u8)((temp%10)+0x30));
   \   00000472   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   00000476   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   0000047A   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   0000047E   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000482   0xB2D2             UXTB     R2,R2
   \   00000484   0x21D0             MOVS     R1,#+208
   \   00000486   0x2078             MOVS     R0,#+120
   \   00000488   0x.... 0x....      BL       LCD_DisplayChar
    658                  
    659                  temp = MCL_Compute_Temp(); 
   \   0000048C   0x.... 0x....      BL       MCL_Compute_Temp
   \   00000490   0x4605             MOV      R5,R0
    660                  LCD_DisplayChar(Line7*24, 16*CHAR_6, (u8)(((temp%1000)/100)+0x30));
   \   00000492   0xFB95 0xF7F4      SDIV     R7,R5,R4
   \   00000496   0xF107 0x0230      ADD      R2,R7,#+48
   \   0000049A   0xB2D2             UXTB     R2,R2
   \   0000049C   0x2160             MOVS     R1,#+96
   \   0000049E   0x20A8             MOVS     R0,#+168
   \   000004A0   0x.... 0x....      BL       LCD_DisplayChar
    661                  LCD_DisplayChar(Line7*24, 16*CHAR_7, (u8)(((temp%100)/10)+0x30));
   \   000004A4   0xFB04 0x5017      MLS      R0,R4,R7,R5
   \   000004A8   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   000004AC   0xF100 0x0230      ADD      R2,R0,#+48
   \   000004B0   0xB2D2             UXTB     R2,R2
   \   000004B2   0x2170             MOVS     R1,#+112
   \   000004B4   0x20A8             MOVS     R0,#+168
   \   000004B6   0x.... 0x....      BL       LCD_DisplayChar
    662                  LCD_DisplayChar(Line7*24, 16*CHAR_8, (u8)((temp%10)+0x30));
   \   000004BA   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   000004BE   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   000004C2   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   000004C6   0xF100 0x0230      ADD      R2,R0,#+48
   \   000004CA   0xB2D2             UXTB     R2,R2
   \   000004CC   0x2180             MOVS     R1,#+128
   \   000004CE   0x20A8             MOVS     R0,#+168
   \   000004D0   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   000004D4   0x.... 0x....      B.W      LCD_DisplayChar
    663                
    664                break;    
    665                  
    666                case(VISUALIZATION_6):
    667                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_27:
   \   000004D8   0x2E06             CMP      R6,#+6
   \   000004DA   0xD023             BEQ.N    ??Display_LCD_28
    668                  {           
    669          #ifdef NO_SPEED_SENSORS          
    670                    ptr = "   Sensorless Demo  ";
    671                    LCD_DisplayStringLine(Line2,ptr);
   \   000004DC   0x.... 0x....      ADR.W    R1,`?<Constant "   Sensorless Demo  ">`
   \   000004E0   0x2002             MOVS     R0,#+2
   \   000004E2   0x.... 0x....      BL       LCD_DisplayStringLine
    672          #else          
    673                    LCD_ClearLine(Line2);
    674          #endif           
    675                    LCD_ClearLine(Line3); 
   \   000004E6   0x2003             MOVS     R0,#+3
   \   000004E8   0x.... 0x....      BL       LCD_ClearLine
    676                    
    677                    ptr = "     Target Measured";
    678                    LCD_DisplayStringLine(Line4,ptr);
   \   000004EC   0x.... 0x....      ADR.W    R1,`?<Constant "     Target Measured">`
   \   000004F0   0x2004             MOVS     R0,#+4
   \   000004F2   0x.... 0x....      BL       LCD_DisplayStringLine
    679                    
    680                    ptr = "Iq                  ";
    681                    LCD_DisplayStringLine(Line5,ptr); 
   \   000004F6   0x.... 0x....      ADR.W    R1,`?<Constant "Iq                  ">`
   \   000004FA   0x2005             MOVS     R0,#+5
   \   000004FC   0x.... 0x....      BL       LCD_DisplayStringLine
    682                    
    683                    ptr = "Id                  ";
    684                    LCD_DisplayStringLine(Line6,ptr);
   \   00000500   0x.... 0x....      ADR.W    R1,`?<Constant "Id                  ">`
   \   00000504   0x2006             MOVS     R0,#+6
   \   00000506   0x.... 0x....      BL       LCD_DisplayStringLine
    685                    
    686                    ptr = "Speed (rpm)         ";
    687                    LCD_DisplayStringLine(Line7,ptr);
   \   0000050A   0x.... 0x....      ADR.W    R1,`?<Constant "Speed (rpm)         ">`
   \   0000050E   0x2007             MOVS     R0,#+7
   \   00000510   0x.... 0x....      BL       LCD_DisplayStringLine
    688                    
    689                    LCD_ClearLine(Line8);
   \   00000514   0x2008             MOVS     R0,#+8
   \   00000516   0x.... 0x....      BL       LCD_ClearLine
    690                    
    691                    ptr = " <> Move  ^| Change ";          
    692                    LCD_DisplayStringLine(Line9, ptr); 
   \   0000051A   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   0000051E   0x2009             MOVS     R0,#+9
   \   00000520   0x.... 0x....      BL       LCD_DisplayStringLine
    693                  }
    694                  
    695                  switch(bMenu_index)
   \                     ??Display_LCD_28:
   \   00000524   0x7820             LDRB     R0,[R4, #+0]
   \   00000526   0x280C             CMP      R0,#+12
   \   00000528   0xD004             BEQ.N    ??Display_LCD_29
   \   0000052A   0xD351             BCC.N    ??Display_LCD_30
   \   0000052C   0x280E             CMP      R0,#+14
   \   0000052E   0xD033             BEQ.N    ??Display_LCD_31
   \   00000530   0xD315             BCC.N    ??Display_LCD_32
   \   00000532   0xE04D             B.N      ??Display_LCD_30
    696                  {
    697                    case(CONTROL_MODE_MENU_6):
    698                      LCD_SetTextColor(Red);
   \                     ??Display_LCD_29:
   \   00000534   0xF44F 0x4078      MOV      R0,#+63488
   \   00000538   0x.... 0x....      BL       LCD_SetTextColor
    699                      ptr = "Torque control mode ";        
    700                      LCD_DisplayStringLine(Line3,ptr);  
   \   0000053C   0x.... 0x....      ADR.W    R1,`?<Constant "Torque control mode ">`
   \   00000540   0x2003             MOVS     R0,#+3
   \   00000542   0x.... 0x....      BL       LCD_DisplayStringLine
    701                      LCD_SetTextColor(Blue);
   \   00000546   0x201F             MOVS     R0,#+31
   \   00000548   0x.... 0x....      BL       LCD_SetTextColor
    702                      
    703                      temp = hTorque_Reference;
   \   0000054C   0x.... 0x....      LDR.W    R0,??DataTable46_5
   \   00000550   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    704                      Display_5DigitSignedNumber(Line5, CHAR_5, temp);
   \   00000554   0x2105             MOVS     R1,#+5
   \   00000556   0x2005             MOVS     R0,#+5
   \   00000558   0x.... 0x....      BL       Display_5DigitSignedNumber
    705           
    706                      temp = hFlux_Reference; 
   \   0000055C   0xE013             B.N      ??Display_LCD_33
    707                      Display_5DigitSignedNumber(Line6, CHAR_5, temp);         
    708                    break;   
    709                    
    710                    case(IQ_REF_MENU):
    711                      ptr = "Torque control mode ";
    712                      LCD_DisplayStringLine(Line3,ptr); 
   \                     ??Display_LCD_32:
   \   0000055E   0x.... 0x....      ADR.W    R1,`?<Constant "Torque control mode ">`
   \   00000562   0x2003             MOVS     R0,#+3
   \   00000564   0x.... 0x....      BL       LCD_DisplayStringLine
    713                      
    714                      LCD_SetTextColor(Red);
   \   00000568   0xF44F 0x4078      MOV      R0,#+63488
   \   0000056C   0x.... 0x....      BL       LCD_SetTextColor
    715                      temp = hTorque_Reference;
   \   00000570   0x.... 0x....      LDR.W    R0,??DataTable46_5
   \   00000574   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    716                      Display_5DigitSignedNumber(Line5, CHAR_5, temp);
   \   00000578   0x2105             MOVS     R1,#+5
   \   0000057A   0x2005             MOVS     R0,#+5
   \   0000057C   0x.... 0x....      BL       Display_5DigitSignedNumber
    717                      LCD_SetTextColor(Blue);
   \   00000580   0x201F             MOVS     R0,#+31
   \   00000582   0x.... 0x....      BL       LCD_SetTextColor
    718                      
    719                      temp = hFlux_Reference; 
   \                     ??Display_LCD_33:
   \   00000586   0x.... 0x....      LDR.W    R0,??DataTable46_8
   \   0000058A   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    720                      Display_5DigitSignedNumber(Line6, CHAR_5, temp); 
   \   0000058E   0x2105             MOVS     R1,#+5
   \   00000590   0x2006             MOVS     R0,#+6
   \   00000592   0x.... 0x....      BL       Display_5DigitSignedNumber
    721                    break;
   \   00000596   0xE01B             B.N      ??Display_LCD_30
    722                      
    723                    case(ID_REF_MENU):
    724                      ptr = "Torque control mode ";
    725                      LCD_DisplayStringLine(Line3,ptr); 
   \                     ??Display_LCD_31:
   \   00000598   0x.... 0x....      ADR.W    R1,`?<Constant "Torque control mode ">`
   \   0000059C   0x2003             MOVS     R0,#+3
   \   0000059E   0x.... 0x....      BL       LCD_DisplayStringLine
    726                      
    727                      temp = hTorque_Reference;
   \   000005A2   0x.... 0x....      LDR.W    R0,??DataTable46_5
   \   000005A6   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    728                      Display_5DigitSignedNumber(Line5, CHAR_5, temp);
   \   000005AA   0x2105             MOVS     R1,#+5
   \   000005AC   0x2005             MOVS     R0,#+5
   \   000005AE   0x.... 0x....      BL       Display_5DigitSignedNumber
    729                      
    730                      LCD_SetTextColor(Red);
   \   000005B2   0xF44F 0x4078      MOV      R0,#+63488
   \   000005B6   0x.... 0x....      BL       LCD_SetTextColor
    731                      temp = hFlux_Reference; 
   \   000005BA   0x.... 0x....      LDR.W    R0,??DataTable46_8
   \   000005BE   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    732                      Display_5DigitSignedNumber(Line6, CHAR_5, temp); 
   \   000005C2   0x2105             MOVS     R1,#+5
   \   000005C4   0x2006             MOVS     R0,#+6
   \   000005C6   0x.... 0x....      BL       Display_5DigitSignedNumber
    733                      LCD_SetTextColor(Blue);
   \   000005CA   0x201F             MOVS     R0,#+31
   \   000005CC   0x.... 0x....      BL       LCD_SetTextColor
    734                    break;
    735                   default: 
    736                    break;
    737                  }            
    738                  temp =Stat_Curr_q_d.qI_Component1;
    739                  Display_5DigitSignedNumber(Line5, CHAR_13, temp);
   \                     ??Display_LCD_30:
   \   000005D0   0x.... 0x....      LDR.W    R4,??DataTable46_6
   \   000005D4   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   000005D8   0x210D             MOVS     R1,#+13
   \   000005DA   0x2005             MOVS     R0,#+5
   \   000005DC   0x.... 0x....      BL       Display_5DigitSignedNumber
    740                  
    741                  temp =Stat_Curr_q_d.qI_Component2;        
    742                  Display_5DigitSignedNumber(Line6, CHAR_13, temp);
   \   000005E0   0xF9B4 0x2002      LDRSH    R2,[R4, #+2]
   \   000005E4   0x210D             MOVS     R1,#+13
   \   000005E6   0x2006             MOVS     R0,#+6
   \   000005E8   0x.... 0x....      BL       Display_5DigitSignedNumber
    743          
    744                  //Compute measured speed in rpm
    745          #ifdef ENCODER
    746                  temp = (s16)(ENC_Get_Mechanical_Speed() * 6);
    747          #elif defined HALL_SENSORS
    748                  temp = (s16)(HALL_GetSpeed() * 6);
    749          #elif defined NO_SPEED_SENSORS        
    750                  temp = (s16)(STO_Get_Speed_Hz() * 6);
   \   000005EC   0x.... 0x....      BL       STO_Get_Speed_Hz
    751          #endif 
    752                  Display_5DigitSignedNumber(Line7, CHAR_13, temp);
   \   000005F0   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000005F4   0x004A             LSLS     R2,R1,#+1
   \   000005F6   0xB212             SXTH     R2,R2
   \   000005F8   0x210D             MOVS     R1,#+13
   \   000005FA   0xE18A             B.N      ??Display_LCD_6
    753                break;
    754                  
    755                case(VISUALIZATION_7):
    756                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_34:
   \   000005FC   0x.... 0x....      LDR.W    R4,??DataTable46_9
   \   00000600   0x2E07             CMP      R6,#+7
   \   00000602   0xD03A             BEQ.N    ??Display_LCD_35
    757                  {  
    758                    LCD_ClearLine(Line2);
   \   00000604   0x2002             MOVS     R0,#+2
   \   00000606   0x.... 0x....      BL       LCD_ClearLine
    759                    
    760                    LCD_SetTextColor(Red);
   \   0000060A   0xF44F 0x4078      MOV      R0,#+63488
   \   0000060E   0x.... 0x....      BL       LCD_SetTextColor
    761                    ptr = "    !!! FAULT !!!   ";
    762                    LCD_DisplayStringLine(Line3,ptr);
   \   00000612   0x.... 0x....      ADR.W    R1,`?<Constant "    !!! FAULT !!!   ">`
   \   00000616   0x2003             MOVS     R0,#+3
   \   00000618   0x.... 0x....      BL       LCD_DisplayStringLine
    763                    LCD_SetTextColor(Blue);
   \   0000061C   0x201F             MOVS     R0,#+31
   \   0000061E   0x.... 0x....      BL       LCD_SetTextColor
    764                   
    765                    if ( (wGlobal_Flags & UNDER_VOLTAGE) == UNDER_VOLTAGE)
   \   00000622   0x6820             LDR      R0,[R4, #+0]
   \   00000624   0x0500             LSLS     R0,R0,#+20
   \   00000626   0xBF48             IT       MI 
   \   00000628   0x.... 0x....      ADRMI.W  R1,`?<Constant " Bus Under Voltage  ">`
    766                    {           
    767                      ptr = " Bus Under Voltage  ";
    768                      LCD_DisplayStringLine(Line4, ptr);                                   
   \   0000062C   0xD41C             BMI.N    ??Display_LCD_36
    769                    }
    770                    else if ( (wGlobal_Flags & OVER_CURRENT) ==  OVER_CURRENT)
   \   0000062E   0x6820             LDR      R0,[R4, #+0]
   \   00000630   0x0580             LSLS     R0,R0,#+22
   \   00000632   0xBF48             IT       MI 
   \   00000634   0x.... 0x....      ADRMI.W  R1,`?<Constant "   Over Current    ">`
    771                      {
    772                        ptr = "   Over Current    ";
    773                        LCD_DisplayStringLine(Line4, ptr); 
   \   00000638   0xD416             BMI.N    ??Display_LCD_36
    774                      }
    775                    else if ( (wGlobal_Flags & OVERHEAT) ==  OVERHEAT)
   \   0000063A   0x6820             LDR      R0,[R4, #+0]
   \   0000063C   0x05C0             LSLS     R0,R0,#+23
   \   0000063E   0xBF48             IT       MI 
   \   00000640   0x.... 0x....      ADRMI.W  R1,`?<Constant "   Over Heating    ">`
    776                      {
    777                        ptr = "   Over Heating    ";
    778                        LCD_DisplayStringLine(Line4, ptr);                             
   \   00000644   0xD410             BMI.N    ??Display_LCD_36
    779                      }
    780                    else if ( (wGlobal_Flags & OVER_VOLTAGE) ==  OVER_VOLTAGE)
   \   00000646   0x6820             LDR      R0,[R4, #+0]
   \   00000648   0x0540             LSLS     R0,R0,#+21
   \   0000064A   0xBF48             IT       MI 
   \   0000064C   0x.... 0x....      ADRMI.W  R1,`?<Constant "  Bus Over Voltage  ">`
    781                      {
    782                        ptr = "  Bus Over Voltage  ";
    783                        LCD_DisplayStringLine(Line4, ptr);               
   \   00000650   0xD40A             BMI.N    ??Display_LCD_36
    784                      }
    785                    else if ( (wGlobal_Flags & START_UP_FAILURE) ==  START_UP_FAILURE)
   \   00000652   0x6820             LDR      R0,[R4, #+0]
   \   00000654   0x0740             LSLS     R0,R0,#+29
   \   00000656   0xBF48             IT       MI 
   \   00000658   0x.... 0x....      ADRMI.W  R1,`?<Constant "  Start-up failed   ">`
    786                    {
    787                       ptr = "  Start-up failed   ";
    788                       LCD_DisplayStringLine(Line4, ptr);    
   \   0000065C   0xD404             BMI.N    ??Display_LCD_36
    789                    }      
    790                    else if ( (wGlobal_Flags & SPEED_FEEDBACK) ==  SPEED_FEEDBACK)
   \   0000065E   0x6820             LDR      R0,[R4, #+0]
   \   00000660   0x0700             LSLS     R0,R0,#+28
   \   00000662   0xD504             BPL.N    ??Display_LCD_37
    791                    {
    792                       ptr = "Error on speed fdbck";
    793                       LCD_DisplayStringLine(Line4, ptr);     
   \   00000664   0x.... 0x....      ADR.W    R1,`?<Constant "Error on speed fdbck">`
   \                     ??Display_LCD_36:
   \   00000668   0x2004             MOVS     R0,#+4
   \   0000066A   0x.... 0x....      BL       LCD_DisplayStringLine
    794                    }  
    795                    LCD_ClearLine(Line5);
   \                     ??Display_LCD_37:
   \   0000066E   0x2005             MOVS     R0,#+5
   \   00000670   0x.... 0x....      BL       LCD_ClearLine
    796                    LCD_ClearLine(Line7);  
   \   00000674   0x2007             MOVS     R0,#+7
   \   00000676   0x.... 0x....      BL       LCD_ClearLine
    797                  } 
    798          
    799                  if ((wGlobal_Flags & ( OVERHEAT | UNDER_VOLTAGE | OVER_VOLTAGE)) == 0) 
   \                     ??Display_LCD_35:
   \   0000067A   0x6820             LDR      R0,[R4, #+0]
   \   0000067C   0xF410 0x6F50      TST      R0,#0xD00
   \   00000680   0xD10B             BNE.N    ??Display_LCD_38
    800                  { 
    801                    LCD_ClearLine(Line6);
   \   00000682   0x2006             MOVS     R0,#+6
   \   00000684   0x.... 0x....      BL       LCD_ClearLine
    802                    ptr = "   Press 'Key' to   ";
    803                    LCD_DisplayStringLine(Line8,ptr);
   \   00000688   0x.... 0x....      ADR.W    R1,`?<Constant "   Press \\'Key\\' to   ">`
   \   0000068C   0x2008             MOVS     R0,#+8
   \   0000068E   0x.... 0x....      BL       LCD_DisplayStringLine
    804                    
    805                    ptr = "   return to menu   ";
    806                    LCD_DisplayStringLine(Line9,ptr);
   \   00000692   0x.... 0x....      ADR.W    R1,`?<Constant "   return to menu   ">`
   \   00000696   0x2009             MOVS     R0,#+9
   \   00000698   0xE19F             B.N      ??Display_LCD_39
    807                  }
    808                  else
    809                  {
    810                    if ((wGlobal_Flags & (UNDER_VOLTAGE | OVER_VOLTAGE)) ==0)    
   \                     ??Display_LCD_38:
   \   0000069A   0x7868             LDRB     R0,[R5, #+1]
   \   0000069C   0x7829             LDRB     R1,[R5, #+0]
   \   0000069E   0x6822             LDR      R2,[R4, #+0]
   \   000006A0   0xF412 0x6F40      TST      R2,#0xC00
   \   000006A4   0xD136             BNE.N    ??Display_LCD_40
    811                    {//Under or over voltage
    812                       if (bPresent_Visualization != bPrevious_Visualization)
   \   000006A6   0x4288             CMP      R0,R1
   \   000006A8   0xBF1C             ITT      NE 
   \   000006AA   0x2006             MOVNE    R0,#+6
   \   000006AC   0x.... 0x....      BLNE     LCD_ClearLine
    813                       { 
    814                         LCD_ClearLine(Line6);
    815                       }
    816                       temp = MCL_Compute_Temp(); 
   \   000006B0   0x.... 0x....      BL       MCL_Compute_Temp
   \   000006B4   0x4605             MOV      R5,R0
    817                       ptr = "       T =";  
    818                       LCD_DisplayStringLine(Line6, ptr);	//320-
   \   000006B6   0x.... 0x....      ADR.W    R1,`?<Constant "       T =">`
   \   000006BA   0x2006             MOVS     R0,#+6
   \   000006BC   0x.... 0x....      BL       LCD_DisplayStringLine
    819                       LCD_DisplayChar(Line6*24, 16*CHAR_11, (u8)(((temp%1000)/100)+0x30));
   \   000006C0   0x2464             MOVS     R4,#+100
   \   000006C2   0xFB95 0xF7F4      SDIV     R7,R5,R4
   \   000006C6   0xF107 0x0230      ADD      R2,R7,#+48
   \   000006CA   0xB2D2             UXTB     R2,R2
   \   000006CC   0x21B0             MOVS     R1,#+176
   \   000006CE   0x2090             MOVS     R0,#+144
   \   000006D0   0x.... 0x....      BL       LCD_DisplayChar
    820                       LCD_DisplayChar(Line6*24, 16*CHAR_12, (u8)(((temp%100)/10)+0x30));
   \   000006D4   0x260A             MOVS     R6,#+10
   \   000006D6   0xFB04 0x5017      MLS      R0,R4,R7,R5
   \   000006DA   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   000006DE   0xF100 0x0230      ADD      R2,R0,#+48
   \   000006E2   0xB2D2             UXTB     R2,R2
   \   000006E4   0x21C0             MOVS     R1,#+192
   \   000006E6   0x2090             MOVS     R0,#+144
   \   000006E8   0x.... 0x....      BL       LCD_DisplayChar
    821                       LCD_DisplayChar(Line6*24, 16*CHAR_13, (u8)((temp%10)+0x30));
   \   000006EC   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   000006F0   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   000006F4   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   000006F8   0xF100 0x0230      ADD      R2,R0,#+48
   \   000006FC   0xB2D2             UXTB     R2,R2
   \   000006FE   0x21D0             MOVS     R1,#+208
   \   00000700   0x2090             MOVS     R0,#+144
   \   00000702   0x.... 0x....      BL       LCD_DisplayChar
    822                       LCD_DisplayChar(Line6*24, 16*CHAR_14, ' ');
   \   00000706   0x2220             MOVS     R2,#+32
   \   00000708   0x21E0             MOVS     R1,#+224
   \   0000070A   0x2090             MOVS     R0,#+144
   \   0000070C   0x.... 0x....      BL       LCD_DisplayChar
    823                       LCD_DisplayChar(Line6*24, 16*CHAR_15, 'C');
   \   00000710   0x2243             MOVS     R2,#+67
   \   00000712   0xE03D             B.N      ??Display_LCD_41
    824                    }
    825                    else 
    826                    {           
    827                      if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_40:
   \   00000714   0x4288             CMP      R0,R1
   \   00000716   0xBF1C             ITT      NE 
   \   00000718   0x2006             MOVNE    R0,#+6
   \   0000071A   0x.... 0x....      BLNE     LCD_ClearLine
    828                      { 
    829                        LCD_ClearLine(Line6);         
    830                      }
    831                      ptr = "  DC bus =";            
    832                      LCD_DisplayStringLine(Line6, ptr); 
   \   0000071E   0x.... 0x....      ADR.W    R1,`?<Constant "  DC bus =">`
   \   00000722   0x2006             MOVS     R0,#+6
   \   00000724   0x.... 0x....      BL       LCD_DisplayStringLine
    833                      temp = MCL_Compute_BusVolt();   // 320-    
   \   00000728   0x.... 0x....      BL       MCL_Compute_BusVolt
   \   0000072C   0xB205             SXTH     R5,R0
    834                      LCD_DisplayChar(Line6*24, 16*CHAR_11, (u8)(((temp%1000)/100)+0x30));
   \   0000072E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000732   0x2464             MOVS     R4,#+100
   \   00000734   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000738   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   0000073C   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \   00000740   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000744   0xB2D2             UXTB     R2,R2
   \   00000746   0x21B0             MOVS     R1,#+176
   \   00000748   0x2090             MOVS     R0,#+144
   \   0000074A   0x.... 0x....      BL       LCD_DisplayChar
    835                      LCD_DisplayChar(Line6*24, 16*CHAR_12, (u8)(((temp%100)/10)+0x30));
   \   0000074E   0x260A             MOVS     R6,#+10
   \   00000750   0xFB95 0xF0F4      SDIV     R0,R5,R4
   \   00000754   0xFB04 0x5010      MLS      R0,R4,R0,R5
   \   00000758   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   0000075C   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000760   0xB2D2             UXTB     R2,R2
   \   00000762   0x21C0             MOVS     R1,#+192
   \   00000764   0x2090             MOVS     R0,#+144
   \   00000766   0x.... 0x....      BL       LCD_DisplayChar
    836                      LCD_DisplayChar(Line6*24, 16*CHAR_13, (u8)((temp%10)+0x30)); 
   \   0000076A   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   0000076E   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   00000772   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   00000776   0xF100 0x0230      ADD      R2,R0,#+48
   \   0000077A   0xB2D2             UXTB     R2,R2
   \   0000077C   0x21D0             MOVS     R1,#+208
   \   0000077E   0x2090             MOVS     R0,#+144
   \   00000780   0x.... 0x....      BL       LCD_DisplayChar
    837                      LCD_DisplayChar(Line6*24, 16*CHAR_14, ' ');
   \   00000784   0x2220             MOVS     R2,#+32
   \   00000786   0x21E0             MOVS     R1,#+224
   \   00000788   0x2090             MOVS     R0,#+144
   \   0000078A   0x.... 0x....      BL       LCD_DisplayChar
    838                      LCD_DisplayChar(Line6*24, 16*CHAR_15, 'V');             
   \   0000078E   0x2256             MOVS     R2,#+86
   \                     ??Display_LCD_41:
   \   00000790   0x21F0             MOVS     R1,#+240
   \   00000792   0x2090             MOVS     R0,#+144
   \   00000794   0x.... 0x....      BL       LCD_DisplayChar
    839                    }          
    840                    LCD_ClearLine(Line8);
   \   00000798   0xE018             B.N      ??Display_LCD_42
    841                    LCD_ClearLine(Line9);
    842                  }
    843                break;
    844               
    845                case(VISUALIZATION_8):  
    846                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_43:
   \   0000079A   0x2E08             CMP      R6,#+8
   \   0000079C   0xF000 0x8138      BEQ.W    ??Display_LCD_1
    847                  {  
    848                    LCD_ClearLine(Line2);
   \   000007A0   0x2002             MOVS     R0,#+2
   \   000007A2   0x.... 0x....      BL       LCD_ClearLine
    849                    
    850                    ptr = " Motor is stopping  ";
    851                    LCD_DisplayStringLine(Line3,ptr);
   \   000007A6   0x.... 0x....      ADR.W    R1,`?<Constant " Motor is stopping  ">`
   \   000007AA   0x2003             MOVS     R0,#+3
   \   000007AC   0x.... 0x....      BL       LCD_DisplayStringLine
    852                    
    853                    ptr = "   please wait...   ";
    854                    LCD_DisplayStringLine(Line4,ptr);
   \   000007B0   0x.... 0x....      ADR.W    R1,`?<Constant "   please wait...   ">`
   \   000007B4   0x2004             MOVS     R0,#+4
   \   000007B6   0x.... 0x....      BL       LCD_DisplayStringLine
    855                    
    856                    LCD_ClearLine(Line5);
   \   000007BA   0x2005             MOVS     R0,#+5
   \   000007BC   0x.... 0x....      BL       LCD_ClearLine
    857                    LCD_ClearLine(Line6);
   \   000007C0   0x2006             MOVS     R0,#+6
   \   000007C2   0x.... 0x....      BL       LCD_ClearLine
    858                    LCD_ClearLine(Line7);
   \   000007C6   0x2007             MOVS     R0,#+7
   \   000007C8   0x.... 0x....      BL       LCD_ClearLine
    859                    LCD_ClearLine(Line8);
   \                     ??Display_LCD_42:
   \   000007CC   0x2008             MOVS     R0,#+8
   \   000007CE   0x.... 0x....      BL       LCD_ClearLine
    860                    LCD_ClearLine(Line9);
   \   000007D2   0x2009             MOVS     R0,#+9
   \   000007D4   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   000007D8   0x.... 0x....      B.W      LCD_ClearLine
    861                  } 
    862                break;
    863          
    864          #ifdef OBSERVER_GAIN_TUNING      
    865                case(VISUALIZATION_9):
    866                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_44:
   \   000007DC   0x2E09             CMP      R6,#+9
   \   000007DE   0xD021             BEQ.N    ??Display_LCD_45
    867                  {           
    868                    ptr = "   Observer Gains   ";
    869                    LCD_DisplayStringLine(Line2,ptr);
   \   000007E0   0x.... 0x....      ADR.W    R1,`?<Constant "   Observer Gains   ">`
   \   000007E4   0x2002             MOVS     R0,#+2
   \   000007E6   0x.... 0x....      BL       LCD_DisplayStringLine
    870                    
    871                    ptr = "     K1       K2    ";
    872                    LCD_DisplayStringLine(Line3,ptr); 
   \   000007EA   0x.... 0x....      ADR.W    R1,`?<Constant "     K1       K2    ">`
   \   000007EE   0x2003             MOVS     R0,#+3
   \   000007F0   0x.... 0x....      BL       LCD_DisplayStringLine
    873                    
    874                    LCD_ClearLine(Line4);
   \   000007F4   0x2004             MOVS     R0,#+4
   \   000007F6   0x.... 0x....      BL       LCD_ClearLine
    875                     
    876                    ptr = "      PLL Gains     ";
    877                    LCD_DisplayStringLine(Line5,ptr); 
   \   000007FA   0x.... 0x....      ADR.W    R1,`?<Constant "      PLL Gains     ">`
   \   000007FE   0x2005             MOVS     R0,#+5
   \   00000800   0x.... 0x....      BL       LCD_DisplayStringLine
    878                    
    879                    ptr = "     P        I     ";
    880                    LCD_DisplayStringLine(Line6,ptr);
   \   00000804   0x.... 0x....      ADR.W    R1,`?<Constant "     P        I     ">`
   \   00000808   0x2006             MOVS     R0,#+6
   \   0000080A   0x.... 0x....      BL       LCD_DisplayStringLine
    881                    
    882                    LCD_ClearLine(Line7);
   \   0000080E   0x2007             MOVS     R0,#+7
   \   00000810   0x.... 0x....      BL       LCD_ClearLine
    883                    
    884                    LCD_ClearLine(Line8);
   \   00000814   0x2008             MOVS     R0,#+8
   \   00000816   0x.... 0x....      BL       LCD_ClearLine
    885                    
    886                    ptr = " <> Move  ^| Change ";          
    887                    LCD_DisplayStringLine(Line9, ptr); 
   \   0000081A   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   0000081E   0x2009             MOVS     R0,#+9
   \   00000820   0x.... 0x....      BL       LCD_DisplayStringLine
    888                  }
    889                  
    890                  switch(bMenu_index)
   \                     ??Display_LCD_45:
   \   00000824   0x7820             LDRB     R0,[R4, #+0]
   \   00000826   0x2811             CMP      R0,#+17
   \   00000828   0xD007             BEQ.N    ??Display_LCD_46
   \   0000082A   0xF0C0 0x80F1      BCC.W    ??Display_LCD_1
   \   0000082E   0x2813             CMP      R0,#+19
   \   00000830   0xD049             BEQ.N    ??Display_LCD_47
   \   00000832   0xD325             BCC.N    ??Display_LCD_48
   \   00000834   0x2814             CMP      R0,#+20
   \   00000836   0xD070             BEQ.N    ??Display_LCD_49
   \   00000838   0xBDF1             POP      {R0,R4-R7,PC}
    891                  {
    892                    case(K1_MENU):
    893                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_46:
   \   0000083A   0xF44F 0x4078      MOV      R0,#+63488
   \   0000083E   0x.... 0x....      BL       LCD_SetTextColor
    894                      temp = wK1_LO/10;
   \   00000842   0x....             LDR.N    R0,??DataTable46_10
   \   00000844   0x6800             LDR      R0,[R0, #+0]
    895                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   00000846   0x210A             MOVS     R1,#+10
   \   00000848   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000084C   0xB212             SXTH     R2,R2
   \   0000084E   0x2103             MOVS     R1,#+3
   \   00000850   0x2004             MOVS     R0,#+4
   \   00000852   0x.... 0x....      BL       Display_5DigitSignedNumber
    896                      
    897                      LCD_SetTextColor(Blue);
   \   00000856   0x201F             MOVS     R0,#+31
   \   00000858   0x.... 0x....      BL       LCD_SetTextColor
    898                      temp = wK2_LO/100;
   \   0000085C   0x....             LDR.N    R0,??DataTable46_11
   \   0000085E   0x6800             LDR      R0,[R0, #+0]
    899                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   00000860   0x2164             MOVS     R1,#+100
   \   00000862   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000866   0xB212             SXTH     R2,R2
   \   00000868   0x210C             MOVS     R1,#+12
   \   0000086A   0x2004             MOVS     R0,#+4
   \   0000086C   0x.... 0x....      BL       Display_5DigitSignedNumber
    900                                
    901                      temp = hPLL_P_Gain;
   \   00000870   0x....             LDR.N    R0,??DataTable46_12
   \   00000872   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    902                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   00000876   0x2103             MOVS     R1,#+3
   \   00000878   0x2007             MOVS     R0,#+7
   \   0000087A   0x.... 0x....      BL       Display_5DigitSignedNumber
    903                      
    904                      temp = hPLL_I_Gain;
   \   0000087E   0xE044             B.N      ??Display_LCD_50
    905                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);
    906                    break;
    907                               
    908                     case(K2_MENU):              
    909                      temp = wK1_LO/10;
   \                     ??Display_LCD_48:
   \   00000880   0x....             LDR.N    R0,??DataTable46_10
   \   00000882   0x6800             LDR      R0,[R0, #+0]
    910                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   00000884   0x210A             MOVS     R1,#+10
   \   00000886   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000088A   0xB212             SXTH     R2,R2
   \   0000088C   0x2103             MOVS     R1,#+3
   \   0000088E   0x2004             MOVS     R0,#+4
   \   00000890   0x.... 0x....      BL       Display_5DigitSignedNumber
    911                      
    912                      LCD_SetTextColor(Red);  
   \   00000894   0xF44F 0x4078      MOV      R0,#+63488
   \   00000898   0x.... 0x....      BL       LCD_SetTextColor
    913                      temp = wK2_LO/100;
   \   0000089C   0x....             LDR.N    R0,??DataTable46_11
   \   0000089E   0x6800             LDR      R0,[R0, #+0]
    914                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   000008A0   0x2164             MOVS     R1,#+100
   \   000008A2   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000008A6   0xB212             SXTH     R2,R2
   \   000008A8   0x210C             MOVS     R1,#+12
   \   000008AA   0x2004             MOVS     R0,#+4
   \   000008AC   0x.... 0x....      BL       Display_5DigitSignedNumber
    915                      
    916                      LCD_SetTextColor(Blue);           
   \   000008B0   0x201F             MOVS     R0,#+31
   \   000008B2   0x.... 0x....      BL       LCD_SetTextColor
    917                      temp = hPLL_P_Gain;
   \   000008B6   0x....             LDR.N    R0,??DataTable46_12
   \   000008B8   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    918                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   000008BC   0x2103             MOVS     R1,#+3
   \   000008BE   0x2007             MOVS     R0,#+7
   \   000008C0   0x.... 0x....      BL       Display_5DigitSignedNumber
    919                      
    920                      temp = hPLL_I_Gain;
   \   000008C4   0xE021             B.N      ??Display_LCD_50
    921                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);
    922                    break;
    923                      
    924                    case(P_PLL_MENU):
    925                      temp = wK1_LO/10;
   \                     ??Display_LCD_47:
   \   000008C6   0x....             LDR.N    R0,??DataTable46_10
   \   000008C8   0x6800             LDR      R0,[R0, #+0]
    926                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   000008CA   0x210A             MOVS     R1,#+10
   \   000008CC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000008D0   0xB212             SXTH     R2,R2
   \   000008D2   0x2103             MOVS     R1,#+3
   \   000008D4   0x2004             MOVS     R0,#+4
   \   000008D6   0x.... 0x....      BL       Display_5DigitSignedNumber
    927                       
    928                      temp = wK2_LO/100;
   \   000008DA   0x....             LDR.N    R0,??DataTable46_11
   \   000008DC   0x6800             LDR      R0,[R0, #+0]
    929                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   000008DE   0x2164             MOVS     R1,#+100
   \   000008E0   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000008E4   0xB212             SXTH     R2,R2
   \   000008E6   0x210C             MOVS     R1,#+12
   \   000008E8   0x2004             MOVS     R0,#+4
   \   000008EA   0x.... 0x....      BL       Display_5DigitSignedNumber
    930                      
    931                      LCD_SetTextColor(Red);           
   \   000008EE   0xF44F 0x4078      MOV      R0,#+63488
   \   000008F2   0x.... 0x....      BL       LCD_SetTextColor
    932                      temp = hPLL_P_Gain;
   \   000008F6   0x....             LDR.N    R0,??DataTable46_12
   \   000008F8   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    933                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   000008FC   0x2103             MOVS     R1,#+3
   \   000008FE   0x2007             MOVS     R0,#+7
   \   00000900   0x.... 0x....      BL       Display_5DigitSignedNumber
    934                      
    935                      LCD_SetTextColor(Blue); 
   \   00000904   0x201F             MOVS     R0,#+31
   \   00000906   0x.... 0x....      BL       LCD_SetTextColor
    936                      temp = hPLL_I_Gain;
   \                     ??Display_LCD_50:
   \   0000090A   0x....             LDR.N    R0,??DataTable46_13
   \   0000090C   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    937                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);
   \   00000910   0x210C             MOVS     R1,#+12
   \                     ??Display_LCD_6:
   \   00000912   0x2007             MOVS     R0,#+7
   \   00000914   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000918   0x....             B.N      Display_5DigitSignedNumber
    938                    break;
    939                      
    940                    case(I_PLL_MENU):
    941                      temp = wK1_LO/10;
   \                     ??Display_LCD_49:
   \   0000091A   0x....             LDR.N    R0,??DataTable46_10
   \   0000091C   0x6800             LDR      R0,[R0, #+0]
    942                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   0000091E   0x210A             MOVS     R1,#+10
   \   00000920   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000924   0xB212             SXTH     R2,R2
   \   00000926   0x2103             MOVS     R1,#+3
   \   00000928   0x2004             MOVS     R0,#+4
   \   0000092A   0x.... 0x....      BL       Display_5DigitSignedNumber
    943                       
    944                      temp = wK2_LO/100;
   \   0000092E   0x....             LDR.N    R0,??DataTable46_11
   \   00000930   0x6800             LDR      R0,[R0, #+0]
    945                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   00000932   0x2164             MOVS     R1,#+100
   \   00000934   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000938   0xB212             SXTH     R2,R2
   \   0000093A   0x210C             MOVS     R1,#+12
   \   0000093C   0x2004             MOVS     R0,#+4
   \   0000093E   0x.... 0x....      BL       Display_5DigitSignedNumber
    946                                 
    947                      temp = hPLL_P_Gain;
   \   00000942   0x....             LDR.N    R0,??DataTable46_12
   \   00000944   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    948                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   00000948   0x2103             MOVS     R1,#+3
   \   0000094A   0x2007             MOVS     R0,#+7
   \   0000094C   0x.... 0x....      BL       Display_5DigitSignedNumber
    949                      
    950                      LCD_SetTextColor(Red);
   \   00000950   0xF44F 0x4078      MOV      R0,#+63488
   \   00000954   0x.... 0x....      BL       LCD_SetTextColor
    951                      temp = hPLL_I_Gain;
   \   00000958   0x....             LDR.N    R0,??DataTable46_13
   \   0000095A   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    952                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);                  
   \   0000095E   0x210C             MOVS     R1,#+12
   \   00000960   0x2007             MOVS     R0,#+7
   \   00000962   0x.... 0x....      BL       Display_5DigitSignedNumber
    953                      LCD_SetTextColor(Blue); 
   \   00000966   0xE04E             B.N      ??Display_LCD_51
    954                    break;  
    955                  default:
    956                     break;
    957                  }
    958                  break;
    959          #endif
    960                
    961          #ifdef DAC_FUNCTIONALITY      
    962              case(VISUALIZATION_10):
    963                if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_52:
   \   00000968   0x2E0A             CMP      R6,#+10
   \   0000096A   0xD01D             BEQ.N    ??Display_LCD_53
    964                {           
    965                  LCD_ClearLine(Line2);
   \   0000096C   0x2002             MOVS     R0,#+2
   \   0000096E   0x.... 0x....      BL       LCD_ClearLine
    966                  
    967                  ptr = "    Signal on PB0   ";
    968                  LCD_DisplayStringLine(Line3,ptr); 
   \   00000972   0x.... 0x....      ADR.W    R1,`?<Constant "    Signal on PB0   ">`
   \   00000976   0x2003             MOVS     R0,#+3
   \   00000978   0x.... 0x....      BL       LCD_DisplayStringLine
    969                  
    970                  LCD_ClearLine(Line4);
   \   0000097C   0x2004             MOVS     R0,#+4
   \   0000097E   0x.... 0x....      BL       LCD_ClearLine
    971                   
    972                  LCD_ClearLine(Line5);
   \   00000982   0x2005             MOVS     R0,#+5
   \   00000984   0x.... 0x....      BL       LCD_ClearLine
    973                  
    974                  ptr = "    Signal on PB1   ";
    975                  LCD_DisplayStringLine(Line6,ptr);
   \   00000988   0x.... 0x....      ADR.W    R1,`?<Constant "    Signal on PB1   ">`
   \   0000098C   0x2006             MOVS     R0,#+6
   \   0000098E   0x.... 0x....      BL       LCD_DisplayStringLine
    976                  
    977                  LCD_ClearLine(Line7);
   \   00000992   0x2007             MOVS     R0,#+7
   \   00000994   0x.... 0x....      BL       LCD_ClearLine
    978                  
    979                  LCD_ClearLine(Line8);
   \   00000998   0x2008             MOVS     R0,#+8
   \   0000099A   0x.... 0x....      BL       LCD_ClearLine
    980                  
    981                  ptr = " <> Move  ^| Change ";          
    982                  LCD_DisplayStringLine(Line9, ptr); 
   \   0000099E   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   000009A2   0x2009             MOVS     R0,#+9
   \   000009A4   0x.... 0x....      BL       LCD_DisplayStringLine
    983                }
    984                
    985                switch(bMenu_index)
   \                     ??Display_LCD_53:
   \   000009A8   0x7820             LDRB     R0,[R4, #+0]
   \   000009AA   0x2815             CMP      R0,#+21
   \   000009AC   0xD002             BEQ.N    ??Display_LCD_54
   \   000009AE   0x2816             CMP      R0,#+22
   \   000009B0   0xD017             BEQ.N    ??Display_LCD_55
   \   000009B2   0xBDF1             POP      {R0,R4-R7,PC}
    986                {
    987                  case(DAC_PB0_MENU):
    988                    LCD_SetTextColor(Red);
   \                     ??Display_LCD_54:
   \   000009B4   0xF44F 0x4078      MOV      R0,#+63488
   \   000009B8   0x.... 0x....      BL       LCD_SetTextColor
    989                    ptr = MCDAC_Output_Var_Name(DAC_CH1);
   \   000009BC   0x2001             MOVS     R0,#+1
   \   000009BE   0x.... 0x....      BL       MCDAC_Output_Var_Name
   \   000009C2   0x4601             MOV      R1,R0
    990                    LCD_DisplayStringLine(Line4, ptr);	
   \   000009C4   0x2004             MOVS     R0,#+4
   \   000009C6   0x.... 0x....      BL       LCD_DisplayStringLine
    991                   // LCD_DisplayStringLine(Line4, "123abc");
    992                    
    993                    LCD_SetTextColor(Blue);
   \   000009CA   0x201F             MOVS     R0,#+31
   \   000009CC   0x.... 0x....      BL       LCD_SetTextColor
    994                    ptr = MCDAC_Output_Var_Name(DAC_CH2);
   \   000009D0   0x2002             MOVS     R0,#+2
   \   000009D2   0x.... 0x....      BL       MCDAC_Output_Var_Name
    995                    LCD_DisplayStringLine(Line7, ptr);
   \   000009D6   0x4601             MOV      R1,R0
   \   000009D8   0x2007             MOVS     R0,#+7
   \                     ??Display_LCD_39:
   \   000009DA   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   000009DE   0x.... 0x....      B.W      LCD_DisplayStringLine
    996                  break;
    997                             
    998                   case(DAC_PB1_MENU):              
    999                    ptr = MCDAC_Output_Var_Name(DAC_CH1);
   \                     ??Display_LCD_55:
   \   000009E2   0x2001             MOVS     R0,#+1
   \   000009E4   0x.... 0x....      BL       MCDAC_Output_Var_Name
   1000                    LCD_DisplayStringLine(Line4, ptr);
   \   000009E8   0x4601             MOV      R1,R0
   \   000009EA   0x2004             MOVS     R0,#+4
   \   000009EC   0x.... 0x....      BL       LCD_DisplayStringLine
   1001                    
   1002                    LCD_SetTextColor(Red);
   \   000009F0   0xF44F 0x4078      MOV      R0,#+63488
   \   000009F4   0x.... 0x....      BL       LCD_SetTextColor
   1003                    ptr = MCDAC_Output_Var_Name(DAC_CH2);
   \   000009F8   0x2002             MOVS     R0,#+2
   \   000009FA   0x.... 0x....      BL       MCDAC_Output_Var_Name
   1004                    LCD_DisplayStringLine(Line7, ptr);
   \   000009FE   0x4601             MOV      R1,R0
   \   00000A00   0x2007             MOVS     R0,#+7
   \   00000A02   0x.... 0x....      BL       LCD_DisplayStringLine
   1005                    LCD_SetTextColor(Blue);
   \                     ??Display_LCD_51:
   \   00000A06   0x201F             MOVS     R0,#+31
   \   00000A08   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   00000A0C   0x.... 0x....      B.W      LCD_SetTextColor
   1006                  break;
   1007                  
   1008                  default:
   1009                   break;
   1010                }
   1011                break;      
   1012          #endif
   1013              default:
   1014                break;      
   1015              }
   1016            }
   1017          }
   \                     ??Display_LCD_1:
   \   00000A10   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1018                    
   1019          /*******************************************************************************
   1020          * Function Name  : Display_5DigitSignedNumber
   1021          * Description    : It Displays a 5 digit signed number in the specified line, 
   1022          *                  starting from a specified element of LCD display matrix 
   1023          * Input          : Line, starting point in LCD dysplay matrix, 5 digit signed
   1024          *                  number 
   1025          * Output         : None
   1026          * Return         : None
   1027          *******************************************************************************/
   1028          

   \                                 In section .text, align 2, keep-with-next
   1029          void Display_5DigitSignedNumber(u8 Line, u8 bFirstchar, s16 number)
   1030          { u32 i;
   \                     Display_5DigitSignedNumber:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4614             MOV      R4,R2
   1031            u16 h_aux=1;
   1032          
   1033            if (number<0)     
   \   00000008   0x0129             LSLS     R1,R5,#+4
   \   0000000A   0xEB00 0x0240      ADD      R2,R0,R0, LSL #+1
   \   0000000E   0x00D6             LSLS     R6,R2,#+3
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD505             BPL.N    ??Display_5DigitSignedNumber_0
   1034            {								 //320-
   1035              LCD_DisplayChar(Line*24,(u16)( 16*bFirstchar), '-');
   \   00000014   0x222D             MOVS     R2,#+45
   \   00000016   0xB2F0             UXTB     R0,R6
   \   00000018   0x.... 0x....      BL       LCD_DisplayChar
   1036              number = -number;
   \   0000001C   0x4264             RSBS     R4,R4,#+0
   \   0000001E   0xE003             B.N      ??Display_5DigitSignedNumber_1
   1037            }
   1038            else 
   1039            {								//320-
   1040              LCD_DisplayChar(Line*24,(u16)( 16*bFirstchar), ' ');
   \                     ??Display_5DigitSignedNumber_0:
   \   00000020   0x2220             MOVS     R2,#+32
   \   00000022   0xB2F0             UXTB     R0,R6
   \   00000024   0x.... 0x....      BL       LCD_DisplayChar
   1041            }
   1042                
   1043            for (i=0; i<4; i++)
   \                     ??Display_5DigitSignedNumber_1:
   \   00000028   0xB224             SXTH     R4,R4
   1044            {										// *24 320 -
   1045              
   1046              LCD_DisplayChar(Line*24, (u16)((16*(bFirstchar+5-i))),
   1047                                                  (u8)(((number%(10*h_aux))/h_aux)+0x30));          
   \   0000002A   0x270A             MOVS     R7,#+10
   \   0000002C   0xFB94 0xF0F7      SDIV     R0,R4,R7
   \   00000030   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   00000034   0xEBA4 0x0041      SUB      R0,R4,R1, LSL #+1
   \   00000038   0xF100 0x0230      ADD      R2,R0,#+48
   \   0000003C   0xB2D2             UXTB     R2,R2
   \   0000003E   0x1D68             ADDS     R0,R5,#+5
   \   00000040   0x0101             LSLS     R1,R0,#+4
   \   00000042   0xB289             UXTH     R1,R1
   \   00000044   0xB2F0             UXTB     R0,R6
   \   00000046   0x.... 0x....      BL       LCD_DisplayChar
   1048              h_aux *= 10;
   \   0000004A   0xF04F 0x0864      MOV      R8,#+100
   \   0000004E   0xFB94 0xF0F8      SDIV     R0,R4,R8
   \   00000052   0xFB08 0x4010      MLS      R0,R8,R0,R4
   \   00000056   0xFB90 0xF0F7      SDIV     R0,R0,R7
   \   0000005A   0xF100 0x0230      ADD      R2,R0,#+48
   \   0000005E   0xB2D2             UXTB     R2,R2
   \   00000060   0x1D28             ADDS     R0,R5,#+4
   \   00000062   0x0101             LSLS     R1,R0,#+4
   \   00000064   0xB289             UXTH     R1,R1
   \   00000066   0xB2F0             UXTB     R0,R6
   \   00000068   0x.... 0x....      BL       LCD_DisplayChar
   \   0000006C   0xF44F 0x777A      MOV      R7,#+1000
   \   00000070   0xFB94 0xF0F7      SDIV     R0,R4,R7
   \   00000074   0xFB07 0x4010      MLS      R0,R7,R0,R4
   \   00000078   0xFB90 0xF0F8      SDIV     R0,R0,R8
   \   0000007C   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000080   0xB2D2             UXTB     R2,R2
   \   00000082   0x1CE8             ADDS     R0,R5,#+3
   \   00000084   0x0101             LSLS     R1,R0,#+4
   \   00000086   0xB289             UXTH     R1,R1
   \   00000088   0xB2F0             UXTB     R0,R6
   \   0000008A   0x.... 0x....      BL       LCD_DisplayChar
   \   0000008E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000092   0xFB94 0xF8F0      SDIV     R8,R4,R0
   \   00000096   0xFB00 0x4018      MLS      R0,R0,R8,R4
   \   0000009A   0xFB90 0xF0F7      SDIV     R0,R0,R7
   \   0000009E   0xF100 0x0230      ADD      R2,R0,#+48
   \   000000A2   0xB2D2             UXTB     R2,R2
   \   000000A4   0x1CA8             ADDS     R0,R5,#+2
   \   000000A6   0x0101             LSLS     R1,R0,#+4
   \   000000A8   0xB289             UXTH     R1,R1
   \   000000AA   0xB2F0             UXTB     R0,R6
   \   000000AC   0x.... 0x....      BL       LCD_DisplayChar
   1049            }							 //320-
   1050            LCD_DisplayChar(Line*24,(u16)((16*(bFirstchar+1))), (u8)(((number/10000))+0x30));
   \   000000B0   0xF108 0x0230      ADD      R2,R8,#+48
   \   000000B4   0xB2D2             UXTB     R2,R2
   \   000000B6   0x1C68             ADDS     R0,R5,#+1
   \   000000B8   0x0101             LSLS     R1,R0,#+4
   \   000000BA   0xB289             UXTH     R1,R1
   \   000000BC   0xB2F0             UXTB     R0,R6
   \   000000BE   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000000C2   0x.... 0x....      B.W      LCD_DisplayChar
   1051          }    
   1052          
   1053          /*******************************************************************************
   1054          * Function Name  : ComputeVisualization
   1055          * Description    : Starting from the value of the bMenuIndex, this function 
   1056          *                  extract the information about the present menu to be 
   1057          *                  displayed on LCD
   1058          * Input          : bMenuIndex variable 
   1059          * Output         : Present visualization
   1060          * Return         : None
   1061          *******************************************************************************/
   1062          

   \                                 In section .text, align 4, keep-with-next
   1063          u8 ComputeVisualization(u8 bLocal_MenuIndex)
   1064          {  
   1065            u8 bTemp;
   1066          
   1067              switch(bLocal_MenuIndex)
   \                     ComputeVisualization:
   \   00000000   0x1E80             SUBS     R0,R0,#+2
   \   00000002   0x2814             CMP      R0,#+20
   \   00000004   0xD81C             BHI.N    ??ComputeVisualization_1
   \   00000006   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??ComputeVisualization_0:
   \   0000000A   0x0B 0x0B          DC8      0xB,0xB,0x1B,0xD
   \              0x1B 0x0D    
   \   0000000E   0x0D 0x1B          DC8      0xD,0x1B,0xF,0xF
   \              0x0F 0x0F    
   \   00000012   0x1B 0x11          DC8      0x1B,0x11,0x13,0x13
   \              0x13 0x13    
   \   00000016   0x13 0x15          DC8      0x13,0x15,0x1B,0x17
   \              0x1B 0x17    
   \   0000001A   0x17 0x17          DC8      0x17,0x17,0x17,0x19
   \              0x17 0x19    
   \   0000001E   0x19 0x00          DC8      0x19,0x0
   1068              {
   1069                case(CONTROL_MODE_MENU_1):
   1070                  bTemp = VISUALIZATION_1;
   1071                break;
   1072                case(REF_SPEED_MENU):
   1073                  bTemp = VISUALIZATION_1;
   1074                break;
   1075                
   1076                case(P_SPEED_MENU):
   1077                  bTemp = VISUALIZATION_2; 
   1078                break;
   1079                case(I_SPEED_MENU):
   1080                  bTemp = VISUALIZATION_2; 
   \                     ??ComputeVisualization_2:
   \   00000020   0x2002             MOVS     R0,#+2
   1081                break;
   \   00000022   0xE00E             B.N      ??ComputeVisualization_3
   1082          #ifdef DIFFERENTIAL_TERM_ENABLED
   1083                case(D_SPEED_MENU):
   1084                 bTemp = VISUALIZATION_2; 
   1085                break;
   1086          #endif        
   1087          
   1088                case(P_TORQUE_MENU):
   1089                  bTemp = VISUALIZATION_3; 
   1090                break; 
   1091                case(I_TORQUE_MENU):
   1092                  bTemp = VISUALIZATION_3; 
   \                     ??ComputeVisualization_4:
   \   00000024   0x2003             MOVS     R0,#+3
   1093                break; 
   \   00000026   0xE00C             B.N      ??ComputeVisualization_3
   1094          #ifdef DIFFERENTIAL_TERM_ENABLED
   1095                case(D_TORQUE_MENU):
   1096                  bTemp = VISUALIZATION_3; 
   1097                break; 
   1098          #endif        
   1099                   
   1100                case(P_FLUX_MENU):
   1101                   bTemp = VISUALIZATION_4; 
   1102                break; 
   1103                case(I_FLUX_MENU):
   1104                   bTemp = VISUALIZATION_4; 
   \                     ??ComputeVisualization_5:
   \   00000028   0x2004             MOVS     R0,#+4
   1105                break; 
   \   0000002A   0xE00A             B.N      ??ComputeVisualization_3
   1106          #ifdef DIFFERENTIAL_TERM_ENABLED
   1107                case(D_FLUX_MENU):
   1108                   bTemp = VISUALIZATION_4; 
   1109                break; 
   1110          #endif
   1111                
   1112          #ifdef FLUX_WEAKENING
   1113                case(P_VOLT_MENU):
   1114                  bTemp = VISUALIZATION_11; 
   1115                break;
   1116                case(I_VOLT_MENU):
   1117                  bTemp = VISUALIZATION_11;
   1118                case(TARGET_VOLT_MENU):
   1119                  bTemp = VISUALIZATION_11;        
   1120                break;
   1121          #endif      
   1122                       
   1123                case(POWER_STAGE_MENU):
   1124                  bTemp = VISUALIZATION_5;
   \                     ??ComputeVisualization_6:
   \   0000002C   0x2005             MOVS     R0,#+5
   1125                break;
   \   0000002E   0xE008             B.N      ??ComputeVisualization_3
   1126                  
   1127                case(CONTROL_MODE_MENU_6):
   1128                  bTemp = VISUALIZATION_6;
   1129                break;
   1130                case(IQ_REF_MENU):
   1131                  bTemp = VISUALIZATION_6;
   1132                break;
   1133                case(ID_REF_MENU):
   1134                  bTemp = VISUALIZATION_6;
   \                     ??ComputeVisualization_7:
   \   00000030   0x2006             MOVS     R0,#+6
   1135                break;  
   \   00000032   0xE006             B.N      ??ComputeVisualization_3
   1136                
   1137                case(FAULT_MENU):
   1138                  bTemp = VISUALIZATION_7;
   \                     ??ComputeVisualization_8:
   \   00000034   0x2007             MOVS     R0,#+7
   1139                break;      
   \   00000036   0xE004             B.N      ??ComputeVisualization_3
   1140               
   1141          #ifdef OBSERVER_GAIN_TUNING  
   1142                case(K1_MENU):
   1143                   bTemp = VISUALIZATION_9;
   1144                 break;   
   1145                 case(K2_MENU):
   1146                   bTemp = VISUALIZATION_9;
   1147                 break;
   1148                 case(P_PLL_MENU):
   1149                   bTemp = VISUALIZATION_9;
   1150                 break;
   1151                 case(I_PLL_MENU):
   1152                  bTemp = VISUALIZATION_9;
   \                     ??ComputeVisualization_9:
   \   00000038   0x2009             MOVS     R0,#+9
   1153                 break;
   \   0000003A   0xE002             B.N      ??ComputeVisualization_3
   1154          #endif
   1155          
   1156          #ifdef DAC_FUNCTIONALITY
   1157                case(DAC_PB0_MENU):
   1158                   bTemp = VISUALIZATION_10;
   1159                 break;   
   1160                 case(DAC_PB1_MENU):
   1161                   bTemp = VISUALIZATION_10;
   \                     ??ComputeVisualization_10:
   \   0000003C   0x200A             MOVS     R0,#+10
   1162                 break;
   \   0000003E   0xE000             B.N      ??ComputeVisualization_3
   1163          #endif             
   1164                default:
   1165                  bTemp = VISUALIZATION_1;
   \                     ??ComputeVisualization_1:
   \   00000040   0x2001             MOVS     R0,#+1
   1166                break;      
   1167              }    
   1168                
   1169              if (State == WAIT)
   \                     ??ComputeVisualization_3:
   \   00000042   0x....             LDR.N    R1,??DataTable46_14
   \   00000044   0x7809             LDRB     R1,[R1, #+0]
   \   00000046   0x2906             CMP      R1,#+6
   \   00000048   0xBF08             IT       EQ 
   \   0000004A   0x2008             MOVEQ    R0,#+8
   1170              {
   1171                bTemp = VISUALIZATION_8;
   1172              }  
   1173              
   1174              return (bTemp);
   \   0000004C   0x4770             BX       LR               ;; return
   1175          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   0x........         DC32     bPrevious_Visualization

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_1:
   \   00000000   0x........         DC32     bMenu_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_2:
   \   00000000   0x........         DC32     hSpeed_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_3:
   \   00000000   0x........         DC32     PID_Speed_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_4:
   \   00000000   0x........         DC32     PID_Torque_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_5:
   \   00000000   0x........         DC32     hTorque_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_6:
   \   00000000   0x........         DC32     Stat_Curr_q_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_7:
   \   00000000   0x........         DC32     PID_Flux_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_8:
   \   00000000   0x........         DC32     hFlux_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_9:
   \   00000000   0x........         DC32     wGlobal_Flags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_10:
   \   00000000   0x........         DC32     wK1_LO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_11:
   \   00000000   0x........         DC32     wK2_LO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_12:
   \   00000000   0x........         DC32     hPLL_P_Gain

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_13:
   \   00000000   0x........         DC32     hPLL_I_Gain

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_14:
   \   00000000   0x........         DC32     State

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " STM32 Motor Control">`:
   \   00000000   0x20 0x53          DC8 " STM32 Motor Control"
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x20 0x4D    
   \              0x6F 0x74    
   \              0x6F 0x72    
   \              0x20 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  PMSM FOC ver 2.0  ">`:
   \   00000000   0x20 0x20          DC8 "  PMSM FOC ver 2.0  "
   \              0x50 0x4D    
   \              0x53 0x4D    
   \              0x20 0x46    
   \              0x4F 0x43    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x20 0x32    
   \              0x2E 0x30    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " <> Move  ^| Change ">`:
   \   00000000   0x20 0x3C          DC8 " <> Move  ^| Change "
   \              0x3E 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x20 0x20    
   \              0x5E 0x7C    
   \              0x20 0x43    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Sensorless Demo  ">`:
   \   00000000   0x20 0x20          DC8 "   Sensorless Demo  "
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x6C    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x44 0x65    
   \              0x6D 0x6F    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target     Measured">`:
   \   00000000   0x20 0x54          DC8 " Target     Measured"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       (rpm)        ">`:
   \   00000000   0x20 0x20          DC8 "       (rpm)        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x72 0x70    
   \              0x6D 0x29    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Speed control mode">`:
   \   00000000   0x20 0x53          DC8 " Speed control mode"
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       Speed        ">`:
   \   00000000   0x20 0x20          DC8 "       Speed        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    P     I     D   ">`:
   \   00000000   0x20 0x20          DC8 "    P     I     D   "
   \              0x20 0x20    
   \              0x50 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x49 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x44 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target        (rpm)">`:
   \   00000000   0x20 0x54          DC8 " Target        (rpm)"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x72 0x70    
   \              0x6D 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Measured      (rpm)">`:
   \   00000000   0x20 0x4D          DC8 " Measured      (rpm)"
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x72 0x70    
   \              0x6D 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       Torque       ">`:
   \   00000000   0x20 0x20          DC8 "       Torque       "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x6F 0x72    
   \              0x71 0x75    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target         (Iq)">`:
   \   00000000   0x20 0x54          DC8 " Target         (Iq)"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x71 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Measured       (Iq)">`:
   \   00000000   0x20 0x4D          DC8 " Measured       (Iq)"
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x71 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "        Flux        ">`:
   \   00000000   0x20 0x20          DC8 "        Flux        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x46 0x6C    
   \              0x75 0x78    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target         (Id)">`:
   \   00000000   0x20 0x54          DC8 " Target         (Id)"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x64 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Measured       (Id)">`:
   \   00000000   0x20 0x4D          DC8 " Measured       (Id)"
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x64 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Power Stage Status ">`:
   \   00000000   0x20 0x50          DC8 " Power Stage Status "
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  DC bus =     Volt ">`:
   \   00000000   0x20 0x20          DC8 "  DC bus =     Volt "
   \              0x44 0x43    
   \              0x20 0x62    
   \              0x75 0x73    
   \              0x20 0x3D    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  T =      Celsius  ">`:
   \   00000000   0x20 0x20          DC8 "  T =      Celsius  "
   \              0x54 0x20    
   \              0x3D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x65 0x6C    
   \              0x73 0x69    
   \              0x75 0x73    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " <> Move            ">`:
   \   00000000   0x20 0x3C          DC8 " <> Move            "
   \              0x3E 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     Target Measured">`:
   \   00000000   0x20 0x20          DC8 "     Target Measured"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Iq                  ">`:
   \   00000000   0x49 0x71          DC8 "Iq                  "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Id                  ">`:
   \   00000000   0x49 0x64          DC8 "Id                  "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Speed (rpm)         ">`:
   \   00000000   0x53 0x70          DC8 "Speed (rpm)         "
   \              0x65 0x65    
   \              0x64 0x20    
   \              0x28 0x72    
   \              0x70 0x6D    
   \              0x29 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Torque control mode ">`:
   \   00000000   0x54 0x6F          DC8 "Torque control mode "
   \              0x72 0x71    
   \              0x75 0x65    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    !!! FAULT !!!   ">`:
   \   00000000   0x20 0x20          DC8 "    !!! FAULT !!!   "
   \              0x20 0x20    
   \              0x21 0x21    
   \              0x21 0x20    
   \              0x46 0x41    
   \              0x55 0x4C    
   \              0x54 0x20    
   \              0x21 0x21    
   \              0x21 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Bus Under Voltage  ">`:
   \   00000000   0x20 0x42          DC8 " Bus Under Voltage  "
   \              0x75 0x73    
   \              0x20 0x55    
   \              0x6E 0x64    
   \              0x65 0x72    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Over Current    ">`:
   \   00000000   0x20 0x20          DC8 "   Over Current    "
   \              0x20 0x4F    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x43 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Over Heating    ">`:
   \   00000000   0x20 0x20          DC8 "   Over Heating    "
   \              0x20 0x4F    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x48 0x65    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  Bus Over Voltage  ">`:
   \   00000000   0x20 0x20          DC8 "  Bus Over Voltage  "
   \              0x42 0x75    
   \              0x73 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  Start-up failed   ">`:
   \   00000000   0x20 0x20          DC8 "  Start-up failed   "
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x2D    
   \              0x75 0x70    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error on speed fdbck">`:
   \   00000000   0x45 0x72          DC8 "Error on speed fdbck"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x6F 0x6E    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x20 0x66    
   \              0x64 0x62    
   \              0x63 0x6B    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Press \\'Key\\' to   ">`:
   \   00000000   0x20 0x20          DC8 "   Press 'Key' to   "
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x20 0x27    
   \              0x4B 0x65    
   \              0x79 0x27    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   return to menu   ">`:
   \   00000000   0x20 0x20          DC8 "   return to menu   "
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x6D    
   \              0x65 0x6E    
   \              0x75 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       T =">`:
   \   00000000   0x20 0x20          DC8 "       T ="
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x20 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  DC bus =">`:
   \   00000000   0x20 0x20          DC8 "  DC bus ="
   \              0x44 0x43    
   \              0x20 0x62    
   \              0x75 0x73    
   \              0x20 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Motor is stopping  ">`:
   \   00000000   0x20 0x4D          DC8 " Motor is stopping  "
   \              0x6F 0x74    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x73 0x74    
   \              0x6F 0x70    
   \              0x70 0x69    
   \              0x6E 0x67    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   please wait...   ">`:
   \   00000000   0x20 0x20          DC8 "   please wait...   "
   \              0x20 0x70    
   \              0x6C 0x65    
   \              0x61 0x73    
   \              0x65 0x20    
   \              0x77 0x61    
   \              0x69 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Observer Gains   ">`:
   \   00000000   0x20 0x20          DC8 "   Observer Gains   "
   \              0x20 0x4F    
   \              0x62 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     K1       K2    ">`:
   \   00000000   0x20 0x20          DC8 "     K1       K2    "
   \              0x20 0x20    
   \              0x20 0x4B    
   \              0x31 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x4B 0x32    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "      PLL Gains     ">`:
   \   00000000   0x20 0x20          DC8 "      PLL Gains     "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x50 0x4C    
   \              0x4C 0x20    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     P        I     ">`:
   \   00000000   0x20 0x20          DC8 "     P        I     "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x49 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    Signal on PB0   ">`:
   \   00000000   0x20 0x20          DC8 "    Signal on PB0   "
   \              0x20 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x61 0x6C    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x50 0x42    
   \              0x30 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    Signal on PB1   ">`:
   \   00000000   0x20 0x20          DC8 "    Signal on PB1   "
   \              0x20 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x61 0x6C    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x50 0x42    
   \              0x31 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1176                
   1177          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  ComputeVisualization
       24  Display_5DigitSignedNumber
              0 -> LCD_DisplayChar
             24 -> LCD_DisplayChar
       24  Display_LCD
             24 -> ComputeVisualization
              0 -> Display_5DigitSignedNumber
             24 -> Display_5DigitSignedNumber
              0 -> LCD_ClearLine
             24 -> LCD_ClearLine
              0 -> LCD_DisplayChar
             24 -> LCD_DisplayChar
              0 -> LCD_DisplayStringLine
             24 -> LCD_DisplayStringLine
              0 -> LCD_SetTextColor
             24 -> LCD_SetTextColor
             24 -> MCDAC_Output_Var_Name
             24 -> MCL_Compute_BusVolt
             24 -> MCL_Compute_Temp
             24 -> STO_Get_Speed_Hz
             24 -> TB_DisplayDelay_IsElapsed
             24 -> TB_Set_DisplayDelay_500us
        8  Display_Welcome_Message
              0 -> LCD_DisplayStringLine
              8 -> LCD_DisplayStringLine


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "        Flux        ">
      24  ?<Constant "       (rpm)        ">
      24  ?<Constant "       Speed        ">
      12  ?<Constant "       T =">
      24  ?<Constant "       Torque       ">
      24  ?<Constant "      PLL Gains     ">
      24  ?<Constant "     K1       K2    ">
      24  ?<Constant "     P        I     ">
      24  ?<Constant "     Target Measured">
      24  ?<Constant "    !!! FAULT !!!   ">
      24  ?<Constant "    P     I     D   ">
      24  ?<Constant "    Signal on PB0   ">
      24  ?<Constant "    Signal on PB1   ">
      24  ?<Constant "   Observer Gains   ">
      20  ?<Constant "   Over Current    ">
      20  ?<Constant "   Over Heating    ">
      24  ?<Constant "   Press \'Key\' to   ">
      24  ?<Constant "   Sensorless Demo  ">
      24  ?<Constant "   please wait...   ">
      24  ?<Constant "   return to menu   ">
      24  ?<Constant "  Bus Over Voltage  ">
      24  ?<Constant "  DC bus =     Volt ">
      12  ?<Constant "  DC bus =">
      24  ?<Constant "  PMSM FOC ver 2.0  ">
      24  ?<Constant "  Start-up failed   ">
      24  ?<Constant "  T =      Celsius  ">
      24  ?<Constant " <> Move            ">
      24  ?<Constant " <> Move  ^| Change ">
      24  ?<Constant " Bus Under Voltage  ">
      24  ?<Constant " Measured       (Id)">
      24  ?<Constant " Measured       (Iq)">
      24  ?<Constant " Measured      (rpm)">
      24  ?<Constant " Motor is stopping  ">
      24  ?<Constant " Power Stage Status ">
      24  ?<Constant " STM32 Motor Control">
      20  ?<Constant " Speed control mode">
      24  ?<Constant " Target         (Id)">
      24  ?<Constant " Target         (Iq)">
      24  ?<Constant " Target        (rpm)">
      24  ?<Constant " Target     Measured">
      24  ?<Constant "Error on speed fdbck">
      24  ?<Constant "Id                  ">
      24  ?<Constant "Iq                  ">
      24  ?<Constant "Speed (rpm)         ">
      24  ?<Constant "Torque control mode ">
       4  ??DataTable46
       4  ??DataTable46_1
       4  ??DataTable46_10
       4  ??DataTable46_11
       4  ??DataTable46_12
       4  ??DataTable46_13
       4  ??DataTable46_14
       4  ??DataTable46_2
       4  ??DataTable46_3
       4  ??DataTable46_4
       4  ??DataTable46_5
       4  ??DataTable46_6
       4  ??DataTable46_7
       4  ??DataTable46_8
       4  ??DataTable46_9
      78  ComputeVisualization
     198  Display_5DigitSignedNumber
    2578  Display_LCD
      36  Display_Welcome_Message
       2  bPrevious_Visualization
          bPresent_Visualization

 
     2 bytes in section .bss
 3 994 bytes in section .text
 
 3 994 bytes of CODE memory
     2 bytes of DATA memory

Errors: none
Warnings: 3
